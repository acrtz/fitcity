"use strict";
const tslib_1 = require("tslib");
/* eslint-disable */ // Because we use tslint
const path_1 = require("path");
const fs_1 = require("fs");
const graphql_1 = require("graphql");
const extendedFormatError_1 = require("../extendedFormatError");
const setupServerSentEvents_1 = require("./setupServerSentEvents");
const withPostGraphileContext_1 = require("../withPostGraphileContext");
const pluginHook_1 = require("../pluginHook");
const chalk = require('chalk');
const Debugger = require('debug'); // tslint:disable-line variable-name
const httpError = require('http-errors');
const parseUrl = require('parseurl');
const finalHandler = require('finalhandler');
const bodyParser = require('body-parser');
const sendFile = require('send');
const LRU = require('lru-cache');
const crypto = require('crypto');
const calculateQueryHash = queryString => crypto.createHash('sha1').update(queryString).digest('base64');
// Fast way of checking if an object is empty,
// faster than `Object.keys(value).length === 0`
const hasOwnProperty = Object.prototype.hasOwnProperty;
function isEmpty(value) {
    for (const key in value) {
        if (hasOwnProperty.call(value, key)) {
            return false;
        }
    }
    return true;
}
const { POSTGRAPHILE_ENV } = process.env;
const debugGraphql = new Debugger('postgraphile:graphql');
const debugRequest = new Debugger('postgraphile:request');
exports.graphiqlDirectory = path_1.resolve(__dirname, '../graphiql/public');
/**
 * The favicon file in `Buffer` format. We can send a `Buffer` directly to the
 * client.
 *
 * @type {Promise<Buffer>}
 */
const favicon = new Promise((resolve, reject) => {
    fs_1.readFile(path_1.resolve(__dirname, '../../../resources/favicon.ico'), (error, data) => {
        if (error)
            reject(error);
        else
            resolve(data);
    });
});
/**
 * The GraphiQL HTML file as a string. We need it to be a string, because we
 * will use a regular expression to replace some variables.
 *
 * @type {Promise<string>}
 */
const origGraphiqlHtml = new Promise((resolve, reject) => {
    fs_1.readFile(path_1.resolve(__dirname, '../graphiql/public/index.html'), 'utf8', (error, data) => {
        if (error)
            reject(error);
        else
            resolve(data);
    });
});
/**
 * We need to be able to share the withPostGraphileContext logic between HTTP
 * and websockets
 */
const withPostGraphileContextFromReqResGenerator = options => {
    const { getGqlSchema, pgSettings, jwtSecret, additionalGraphQLContextFromRequest, } = options;
    return async (req, res, moreOptions, fn) => {
        const jwtToken = options.jwtSecret ? getJwtToken(req) : null;
        const additionalContext = typeof additionalGraphQLContextFromRequest === 'function'
            ? await additionalGraphQLContextFromRequest(req, res)
            : {};
        return withPostGraphileContext_1.default(tslib_1.__assign({}, options, { jwtToken, pgSettings: typeof pgSettings === 'function'
                ? await pgSettings(req)
                : pgSettings }, moreOptions), context => {
            const graphqlContext = Object.assign({}, additionalContext, context);
            return fn(graphqlContext);
        });
    };
};
/**
 * Creates a GraphQL request handler, this is untyped besides some JSDoc types
 * for intellisense.
 *
 * @param {GraphQLSchema} graphqlSchema
 */
function createPostGraphileHttpRequestHandler(options) {
    const MEGABYTE = 1024 * 1024;
    const { getGqlSchema, pgPool, pgSettings, pgDefaultRole, queryCacheMaxSize = 100 * MEGABYTE, } = options;
    const pluginHook = pluginHook_1.pluginHookFromOptions(options);
    if (pgDefaultRole && typeof pgSettings === 'function') {
        throw new Error('pgDefaultRole cannot be combined with pgSettings(req) - please remove pgDefaultRole and instead always return a `role` key from pgSettings(req).');
    }
    if (pgDefaultRole &&
        pgSettings &&
        typeof pgSettings === 'object' &&
        Object.keys(pgSettings)
            .map(s => s.toLowerCase())
            .indexOf('role') >= 0) {
        throw new Error('pgDefaultRole cannot be combined with pgSettings.role - please use one or the other.');
    }
    // Gets the route names for our GraphQL endpoint, and our GraphiQL endpoint.
    const graphqlRoute = options.graphqlRoute || '/graphql';
    const graphiqlRoute = options.graphiql === true ? options.graphiqlRoute || '/graphiql' : null;
    // Throw an error of the GraphQL and GraphiQL routes are the same.
    if (graphqlRoute === graphiqlRoute)
        throw new Error(`Cannot use the same route, '${graphqlRoute}', for both GraphQL and GraphiQL. Please use different routes.`);
    // Formats an error using the default GraphQL `formatError` function, and
    // custom formatting using some other options.
    const formatError = error => {
        // Get the appropriate formatted error object, including any extended error
        // fields if the user wants them.
        const formattedError = options.extendedErrors && options.extendedErrors.length
            ? extendedFormatError_1.extendedFormatError(error, options.extendedErrors)
            : graphql_1.formatError(error);
        // If the user wants to see the error’s stack, let’s add it to the
        // formatted error.
        if (options.showErrorStack)
            formattedError.stack =
                options.showErrorStack === 'json'
                    ? error.stack.split('\n')
                    : error.stack;
        return formattedError;
    };
    const DEFAULT_HANDLE_ERRORS = errors => errors.map(formatError);
    const handleErrors = options.handleErrors || DEFAULT_HANDLE_ERRORS;
    // Define a list of middlewares that will get run before our request handler.
    // Note though that none of these middlewares will intercept a request (i.e.
    // not call `next`). Middlewares that handle a request like favicon
    // middleware will result in a promise that never resolves, and we don’t
    // want that.
    const bodyParserMiddlewares = [
        // Parse JSON bodies.
        bodyParser.json({ limit: options.bodySizeLimit }),
        // Parse URL encoded bodies (forms).
        bodyParser.urlencoded({ extended: false }),
        // Parse `application/graphql` content type bodies as text.
        bodyParser.text({ type: 'application/graphql' }),
    ];
    // We'll turn this into one function now so it can be better JIT optimised
    const bodyParserMiddlewaresComposed = bodyParserMiddlewares.reduce((parent, fn) => {
        return (req, res, next) => {
            parent(req, res, error => {
                if (error) {
                    return next(error);
                }
                fn(req, res, next);
            });
        };
    });
    // And we really want that function to be await-able
    const parseBody = (req, res) => new Promise((resolve, reject) => {
        bodyParserMiddlewaresComposed(req, res, error => {
            if (error) {
                reject(error);
            }
            else {
                resolve();
            }
        });
    });
    // Takes the original GraphiQL HTML file and replaces the default config object.
    const graphiqlHtml = origGraphiqlHtml.then(html => html.replace(/window\.POSTGRAPHILE_CONFIG\s*=\s*\{[^]*\}/, `window.POSTGRAPHILE_CONFIG={graphqlUrl:'${graphqlRoute}',streamUrl:${options.watchPg ? '\'/_postgraphile/stream\'' : 'null'}}`));
    const withPostGraphileContextFromReqRes = withPostGraphileContextFromReqResGenerator(options);
    const staticValidationRules = pluginHook('postgraphile:validationRules:static', graphql_1.specifiedRules, {
        options,
        httpError,
    });
    // Typically clients use static queries, so we can cache the parse and
    // validate stages for when we see the same query again. Limit the store size
    // to 100MB (or queryCacheMaxSize) so it doesn't consume too much RAM.
    const SHA1_BASE64_LENGTH = 28;
    const queryCache = LRU({
        max: queryCacheMaxSize,
        length: (n, key) => n.length + SHA1_BASE64_LENGTH,
    });
    let lastGqlSchema;
    const parseQuery = (gqlSchema, queryString) => {
        if (gqlSchema !== lastGqlSchema) {
            queryCache.reset();
            lastGqlSchema = gqlSchema;
        }
        // Only cache queries that are less than 100kB, we don't want DOS attacks
        // attempting to exhaust our memory.
        const canCache = queryString.length < 100000;
        const hash = canCache && calculateQueryHash(queryString);
        const result = canCache && queryCache.get(hash);
        if (result) {
            return result;
        }
        else {
            const source = new graphql_1.Source(queryString, 'GraphQL Http Request');
            let queryDocumentAst;
            // Catch an errors while parsing so that we can set the `statusCode` to
            // 400. Otherwise we don’t need to parse this way.
            try {
                queryDocumentAst = graphql_1.parse(source);
            }
            catch (error) {
                error.statusCode = 400;
                throw error;
            }
            if (debugRequest.enabled)
                debugRequest('GraphQL query is parsed.');
            // Validate our GraphQL query using given rules.
            const validationErrors = graphql_1.validate(gqlSchema, queryDocumentAst, staticValidationRules);
            const cacheResult = { queryDocumentAst, validationErrors };
            if (canCache) {
                queryCache.set(hash, cacheResult);
            }
            return cacheResult;
        }
    };
    /**
     * The actual request handler. It’s an async function so it will return a
     * promise when complete. If the function doesn’t handle anything, it calls
     * `next` to let the next middleware try and handle it.
     *
     * @param {IncomingMessage} req
     * @param {ServerResponse} res
     */
    const requestHandler = async (incomingReq, res, next) => {
        // You can use this hook either to modify the incoming request or to tell
        // PostGraphile not to handle the request further (return null). NOTE: if
        // you return `null` from this hook then you are also responsible for
        // calling `next()` (should that be required).
        const req = pluginHook('postgraphile:http:handler', incomingReq, { options, res, next });
        if (req == null) {
            return;
        }
        // Add our CORS headers to be good web citizens (there are perf
        // implications though so be careful!)
        //
        // Always enable CORS when developing PostGraphile because GraphiQL will be
        // on port 5783.
        if (options.enableCors || POSTGRAPHILE_ENV === 'development')
            addCORSHeaders(res);
        const { pathname } = parseUrl(req);
        const isGraphqlRoute = pathname === graphqlRoute;
        // ========================================================================
        // Serve GraphiQL and Related Assets
        // ========================================================================
        if (options.graphiql && !isGraphqlRoute) {
            // ======================================================================
            // Favicon
            // ======================================================================
            // If this is the favicon path and it has not yet been handled, let us
            // serve our GraphQL favicon.
            if (pathname === '/favicon.ico') {
                // If this is the wrong method, we should let the client know.
                if (!(req.method === 'GET' || req.method === 'HEAD')) {
                    res.statusCode = req.method === 'OPTIONS' ? 200 : 405;
                    res.setHeader('Allow', 'GET, HEAD, OPTIONS');
                    res.end();
                    return;
                }
                // Otherwise we are good and should pipe the favicon to the browser.
                res.statusCode = 200;
                res.setHeader('Cache-Control', 'public, max-age=86400');
                res.setHeader('Content-Type', 'image/x-icon');
                // End early if the method is `HEAD`.
                if (req.method === 'HEAD') {
                    res.end();
                    return;
                }
                res.end(await favicon);
                return;
            }
            // ======================================================================
            // GraphiQL `create-react-app` Assets
            // ======================================================================
            // Serve the assets for GraphiQL on a namespaced path. This will basically
            // serve up the built GraphiQL directory.
            if (pathname.startsWith('/_postgraphile/graphiql/')) {
                // If using the incorrect method, let the user know.
                if (!(req.method === 'GET' || req.method === 'HEAD')) {
                    res.statusCode = req.method === 'OPTIONS' ? 200 : 405;
                    res.setHeader('Allow', 'GET, HEAD, OPTIONS');
                    res.end();
                    return;
                }
                // Gets the asset path (the path name with the PostGraphile prefix
                // stripped off) and turns it into a real filesystem path
                const assetPath = path_1.resolve(path_1.join(exports.graphiqlDirectory, pathname.slice('/_postgraphile/graphiql/'.length)));
                // Figures out the relative path for assetPath within graphiqlDirectory
                // so we can correctly filter 'index.html' and 'asset-manifest.json'
                const assetPathRelative = path_1.relative(exports.graphiqlDirectory, assetPath);
                // Block any attempts at path traversal issues
                if (assetPath.substr(0, exports.graphiqlDirectory.length) !== exports.graphiqlDirectory ||
                    assetPathRelative.substr(0, 2) === '..') {
                    res.statusCode = 403;
                    res.end();
                    return;
                }
                // Don’t allow certain files generated by `create-react-app` to be
                // inspected.
                if (assetPathRelative === 'index.html' ||
                    assetPathRelative === 'asset-manifest.json') {
                    res.statusCode = 404;
                    res.end();
                    return;
                }
                // Sends the asset at this path. Defaults to a `statusCode` of 200.
                res.statusCode = 200;
                await new Promise((resolve, reject) => {
                    const stream = sendFile(req, assetPathRelative, {
                        index: false,
                        root: exports.graphiqlDirectory,
                        dotfiles: 'ignore',
                    })
                        .on('end', resolve)
                        .on('error', reject)
                        .pipe(res);
                });
                return;
            }
            // ======================================================================
            // GraphiQL Watch Stream
            // ======================================================================
            // Setup an event stream so we can broadcast events to graphiql, etc.
            if (pathname === '/_postgraphile/stream') {
                if (!options.watchPg || req.headers.accept !== 'text/event-stream') {
                    res.statusCode = 405;
                    res.end();
                    return;
                }
                setupServerSentEvents_1.default(req, res, options);
                return;
            }
            // ======================================================================
            // GraphiQL HTML
            // ======================================================================
            // If this is the GraphiQL route, show GraphiQL and stop execution.
            if (pathname === graphiqlRoute) {
                // If we are developing PostGraphile, instead just redirect.
                if (POSTGRAPHILE_ENV === 'development') {
                    res.writeHead(302, { Location: 'http://localhost:5783' });
                    res.end();
                    return;
                }
                // If using the incorrect method, let the user know.
                if (!(req.method === 'GET' || req.method === 'HEAD')) {
                    res.statusCode = req.method === 'OPTIONS' ? 200 : 405;
                    res.setHeader('Allow', 'GET, HEAD, OPTIONS');
                    res.end();
                    return;
                }
                res.statusCode = 200;
                res.setHeader('Content-Type', 'text/html; charset=utf-8');
                // End early if the method is `HEAD`.
                if (req.method === 'HEAD') {
                    res.end();
                    return;
                }
                // Actually renders GraphiQL.
                res.end(await graphiqlHtml);
                return;
            }
        }
        // Don’t handle any requests if this is not the correct route.
        if (!isGraphqlRoute)
            return next();
        // ========================================================================
        // Execute GraphQL Queries
        // ========================================================================
        // If we didn’t call `next` above, all requests will return 200 by default!
        res.statusCode = 200;
        if (options.watchPg) {
            // Inform GraphiQL and other clients that they can subscribe to events
            // (such as the schema being updated) at the following URL
            res.setHeader('X-GraphQL-Event-Stream', '/_postgraphile/stream');
        }
        // Don’t execute our GraphQL stuffs for `OPTIONS` requests.
        if (req.method === 'OPTIONS') {
            res.statusCode = 200;
            res.end();
            return;
        }
        // The `result` will be used at the very end in our `finally` block.
        // Statements inside the `try` will assign to `result` when they get
        // a result. We also keep track of `params`.
        let paramsList;
        let results;
        const queryTimeStart = !options.disableQueryLog && process.hrtime();
        let pgRole;
        if (debugRequest.enabled)
            debugRequest('GraphQL query request has begun.');
        let returnArray = false;
        // This big `try`/`catch`/`finally` block represents the execution of our
        // GraphQL query. All errors thrown in this block will be returned to the
        // client as GraphQL errors.
        try {
            // First thing we need to do is get the GraphQL schema for this request.
            // It should never really change unless we are in watch mode.
            const gqlSchema = await getGqlSchema();
            // Note that we run our middleware after we make sure we are on the
            // correct route. This is so that if our middleware modifies the `req` or
            // `res` objects, only we downstream will see the modifications.
            //
            // We also run our middleware inside the `try` so that we get the GraphQL
            // error reporting style for syntax errors.
            await parseBody(req, res);
            // If this is not one of the correct methods, throw an error.
            if (req.method !== 'POST') {
                res.setHeader('Allow', 'POST, OPTIONS');
                throw httpError(405, 'Only `POST` requests are allowed.');
            }
            // Get the parameters we will use to run a GraphQL request. `params` may
            // include:
            //
            // - `query`: The required GraphQL query string.
            // - `variables`: An optional JSON object containing GraphQL variables.
            // - `operationName`: The optional name of the GraphQL operation we will
            //   be executing.
            paramsList = typeof req.body === 'string' ? { query: req.body } : req.body;
            // Validate our paramsList object a bit.
            if (paramsList == null)
                throw httpError(400, 'Must provide an object parameters, not nullish value.');
            if (typeof paramsList !== 'object')
                throw httpError(400, `Expected parameter object, not value of type '${typeof paramsList}'.`);
            if (Array.isArray(paramsList)) {
                if (!options.enableQueryBatching) {
                    throw httpError(501, 'Batching queries as an array is currently unsupported. Please provide a single query object.');
                }
                else {
                    returnArray = true;
                }
            }
            else {
                paramsList = [paramsList];
            }
            paramsList = pluginHook('postgraphile:httpParamsList', paramsList, { options, req, res, returnArray, httpError });
            results = await Promise.all(paramsList.map(async (params) => {
                let queryDocumentAst;
                let result;
                let meta = {};
                try {
                    if (!params.query)
                        throw httpError(400, 'Must provide a query string.');
                    // If variables is a string, we assume it is a JSON string and that it
                    // needs to be parsed.
                    if (typeof params.variables === 'string') {
                        // If variables is just an empty string, we should set it to null and
                        // ignore it.
                        if (params.variables === '') {
                            params.variables = null;
                        }
                        else {
                            // Otherwise, let us try to parse it as JSON.
                            try {
                                params.variables = JSON.parse(params.variables);
                            }
                            catch (error) {
                                error.statusCode = 400;
                                throw error;
                            }
                        }
                    }
                    // Throw an error if `variables` is not an object.
                    if (params.variables != null && typeof params.variables !== 'object')
                        throw httpError(400, `Variables must be an object, not '${typeof params.variables}'.`);
                    // Throw an error if `operationName` is not a string.
                    if (params.operationName != null &&
                        typeof params.operationName !== 'string')
                        throw httpError(400, `Operation name must be a string, not '${typeof params.operationName}'.`);
                    let validationErrors;
                    ({ queryDocumentAst, validationErrors } = parseQuery(gqlSchema, params.query));
                    if (validationErrors.length === 0) {
                        // You are strongly encouraged to use
                        // `postgraphile:validationRules:static` if possible - you should
                        // only use this one if you need access to variables.
                        const moreValidationRules = pluginHook('postgraphile:validationRules', [], {
                            options,
                            req,
                            res,
                            variables: params.variables,
                            operationName: params.operationName,
                            meta,
                        });
                        if (moreValidationRules.length) {
                            validationErrors = graphql_1.validate(gqlSchema, queryDocumentAst, moreValidationRules);
                        }
                    }
                    // If we have some validation errors, don’t execute the query. Instead
                    // send the errors to the client with a `400` code.
                    if (validationErrors.length > 0) {
                        result = { errors: validationErrors, statusCode: 400 };
                    }
                    else {
                        if (debugRequest.enabled)
                            debugRequest('GraphQL query is validated.');
                        // Lazily log the query. If this debugger isn’t enabled, don’t run it.
                        if (debugGraphql.enabled)
                            debugGraphql(graphql_1.print(queryDocumentAst)
                                .replace(/\s+/g, ' ')
                                .trim());
                        result = await withPostGraphileContextFromReqRes(req, res, {
                            singleStatement: false,
                            queryDocumentAst,
                            variables: params.variables,
                            operationName: params.operationName,
                        }, graphqlContext => {
                            pgRole = graphqlContext.pgRole;
                            return graphql_1.execute(gqlSchema, queryDocumentAst, null, graphqlContext, params.variables, params.operationName);
                        });
                    }
                }
                catch (error) {
                    result = { errors: [error], statusCode: error.status || error.statusCode || 500 };
                    // If the status code is 500, let’s log our error.
                    if (result.statusCode === 500)
                        // tslint:disable-next-line no-console
                        console.error(error.stack);
                }
                finally {
                    // Format our errors so the client doesn’t get the full thing.
                    if (result && result.errors) {
                        result.errors = handleErrors(result.errors, req, res);
                    }
                    if (!isEmpty(meta)) {
                        result.meta = meta;
                    }
                    // Log the query. If this debugger isn’t enabled, don’t run it.
                    if (!options.disableQueryLog && queryDocumentAst) {
                        setTimeout(() => {
                            const prettyQuery = graphql_1.print(queryDocumentAst)
                                .replace(/\s+/g, ' ')
                                .trim();
                            const errorCount = (result.errors || []).length;
                            const timeDiff = process.hrtime(queryTimeStart);
                            const ms = Math.round((timeDiff[0] * 1e9 + timeDiff[1]) * 10e-7 * 100) / 100;
                            // If we have enabled the query log for the Http handler, use that.
                            // tslint:disable-next-line no-console
                            console.log(`${chalk[errorCount === 0 ? 'green' : 'red'](`${errorCount} error(s)`)} ${pgRole != null ? `as ${chalk.magenta(pgRole)} ` : ''}in ${chalk.grey(`${ms}ms`)} :: ${prettyQuery}`);
                        }, 0);
                    }
                    if (debugRequest.enabled)
                        debugRequest('GraphQL query has been executed.');
                }
                return result;
            }));
        }
        catch (error) {
            // Set our status code and send the client our results!
            if (res.statusCode === 200)
                res.statusCode = error.status || error.statusCode || 500;
            // Overwrite entire response
            returnArray = false;
            results = [{ errors: [error] }];
            // If the status code is 500, let’s log our error.
            if (res.statusCode === 500)
                // tslint:disable-next-line no-console
                console.error(error.stack);
        }
        finally {
            // Finally, we send the client the results.
            if (!returnArray) {
                if (res.statusCode === 200 && results[0].statusCode) {
                    res.statusCode = results[0].statusCode;
                }
                delete results[0].statusCode;
            }
            res.setHeader('Content-Type', 'application/json; charset=utf-8');
            res.end(JSON.stringify(returnArray ? results : results[0]));
            if (debugRequest.enabled)
                debugRequest('GraphQL ' + (returnArray ? 'queries' : 'query') + ' request finished.');
        }
    };
    /**
     * A polymorphic request handler that should detect what `http` framework is
     * being used and specifically handle that framework.
     *
     * Supported frameworks include:
     *
     * - Native Node.js `http`.
     * - `connect`.
     * - `express`.
     * - `koa` (2.0).
     */
    const middleware = (a, b, c) => {
        // If are arguments look like the arguments to koa middleware, this is
        // `koa` middleware.
        if (a.req && a.res && typeof b === 'function') {
            // Set the correct `koa` variable names…
            const ctx = a;
            const next = b;
            // Execute our request handler. If an error is thrown, we don’t call
            // `next` with an error. Instead we return the promise and let `koa`
            // handle the error.
            return requestHandler(ctx.req, ctx.res, next);
        }
        else {
            // Set the correct `connect` style variable names. If there was no `next`
            // defined (likely the case if the client is using `http`) we use the
            // final handler.
            const req = a;
            const res = b;
            const next = c || finalHandler(req, res);
            // Execute our request handler.
            requestHandler(req, res, next).then(
            // If the request was fulfilled, noop.
            () => {
                /* noop */
            }, 
            // If the request errored out, call `next` with the error.
            error => next(error));
        }
    };
    middleware.getGraphQLSchema = getGqlSchema;
    middleware.formatError = formatError;
    middleware.pgPool = pgPool;
    middleware.withPostGraphileContextFromReqRes = withPostGraphileContextFromReqRes;
    return middleware;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = createPostGraphileHttpRequestHandler;
/**
 * Adds CORS to a request. See [this][1] flowchart for an explanation of how
 * CORS works. Note that these headers are set for all requests, CORS
 * algorithms normally run a preflight request using the `OPTIONS` method to
 * get these headers.
 *
 * Note though, that enabling CORS will incur extra costs when it comes to the
 * preflight requests. It is much better if you choose to use a proxy and
 * bypass CORS altogether.
 *
 * [1]: http://www.html5rocks.com/static/images/cors_server_flowchart.png
 */
function addCORSHeaders(res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Request-Method', 'HEAD, GET, POST');
    res.setHeader('Access-Control-Allow-Headers', [
        'Origin',
        'X-Requested-With',
        // Used by `express-graphql` to determine whether to expose the GraphiQL
        // interface (`text/html`) or not.
        'Accept',
        // Used by PostGraphile for auth purposes.
        'Authorization',
        // The `Content-*` headers are used when making requests with a body,
        // like in a POST request.
        'Content-Type',
        'Content-Length',
    ].join(', '));
}
/**
 * Parses the `Bearer` auth scheme token out of the `Authorization` header as
 * defined by [RFC7235][1].
 *
 * ```
 * Authorization = credentials
 * credentials   = auth-scheme [ 1*SP ( token68 / #auth-param ) ]
 * token68       = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )*"="
 * ```
 *
 * [1]: https://tools.ietf.org/html/rfc7235
 *
 * @private
 */
const authorizationBearerRex = /^\s*bearer\s+([a-z0-9\-._~+/]+=*)\s*$/i;
/**
 * Gets the JWT token from the Http request’s headers. Specifically the
 * `Authorization` header in the `Bearer` format. Will throw an error if the
 * header is in the incorrect format, but will not throw an error if the header
 * does not exist.
 *
 * @private
 * @param {IncomingMessage} request
 * @returns {string | null}
 */
function getJwtToken(request) {
    const { authorization } = request.headers;
    // If there was no authorization header, just return null.
    if (authorization == null)
        return null;
    const match = authorizationBearerRex.exec(authorization);
    // If we did not match the authorization header with our expected format,
    // throw a 400 error.
    if (!match)
        throw httpError(400, 'Authorization header is not of the correct bearer scheme format.');
    // Return the token from our match.
    return match[1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUG9zdEdyYXBoaWxlSHR0cFJlcXVlc3RIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Bvc3RncmFwaGlsZS9odHRwL2NyZWF0ZVBvc3RHcmFwaGlsZUh0dHBSZXF1ZXN0SGFuZGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9CQUFvQixDQUFBLHdCQUF3QjtBQUM1QywrQkFJYTtBQUNiLDJCQUE2QjtBQUU3QixxQ0FTZ0I7QUFDaEIsZ0VBQTREO0FBSTVELG1FQUEyRDtBQUUzRCx3RUFBZ0U7QUFFaEUsOENBQXFEO0FBRXJELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxvQ0FBb0M7QUFDdEUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQ3hDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNwQyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDNUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQ3pDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDaEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBRWhDLE1BQU0sa0JBQWtCLEdBQUcsV0FBVyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUV4Ryw4Q0FBOEM7QUFDOUMsZ0RBQWdEO0FBQ2hELE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FB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
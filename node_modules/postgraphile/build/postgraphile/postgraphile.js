"use strict";
const pg_1 = require("pg");
const pg_connection_string_1 = require("pg-connection-string");
const events_1 = require("events");
const postgraphile_core_1 = require("postgraphile-core");
const createPostGraphileHttpRequestHandler_1 = require("./http/createPostGraphileHttpRequestHandler");
const exportPostGraphileSchema_1 = require("./schema/exportPostGraphileSchema");
const pluginHook_1 = require("./pluginHook");
/**
 * Creates a PostGraphile Http request handler by first introspecting the
 * database to get a GraphQL schema, and then using that to create the Http
 * request handler.
 */
function getPostgraphileSchemaBuilder(pgPool, schema, incomingOptions) {
    const pluginHook = pluginHook_1.pluginHookFromOptions(incomingOptions);
    const options = pluginHook('postgraphile:options', incomingOptions, { pgPool, schema });
    // Check for a jwtSecret without a jwtPgTypeIdentifier
    // a secret without a token identifier prevents JWT creation
    if (options.jwtSecret && !options.jwtPgTypeIdentifier) {
        // tslint:disable-next-line no-console
        console.warn('WARNING: jwtSecret provided, however jwtPgTypeIdentifier (token identifier) not provided.');
    }
    if (options.handleErrors && (options.extendedErrors || options.showErrorStack)) {
        throw new Error(`You cannot combine 'handleErrors' with the other error options`);
    }
    // Creates the Postgres schemas array.
    const pgSchemas = Array.isArray(schema) ? schema : [schema];
    const _emitter = new events_1.EventEmitter();
    // Creates a promise which will resolve to a GraphQL schema. Connects a
    // client from our pool to introspect the database.
    //
    // This is not a constant because when we are in watch mode, we want to swap
    // out the `gqlSchema`.
    let gqlSchema;
    let gqlSchemaPromise = createGqlSchema();
    return {
        _emitter,
        getGraphQLSchema: () => Promise.resolve(gqlSchema || gqlSchemaPromise),
    };
    async function createGqlSchema() {
        try {
            if (options.watchPg) {
                await postgraphile_core_1.watchPostGraphileSchema(pgPool, pgSchemas, options, (newSchema) => {
                    gqlSchema = newSchema;
                    _emitter.emit('schemas:changed');
                    exportGqlSchema(gqlSchema);
                });
                if (!gqlSchema) {
                    throw new Error('Consistency error: watchPostGraphileSchema promises to call the callback before the promise resolves; but this hasn\'t happened');
                }
            }
            else {
                gqlSchema = await postgraphile_core_1.createPostGraphileSchema(pgPool, pgSchemas, options);
                exportGqlSchema(gqlSchema);
            }
            return gqlSchema;
        }
        // If we fail to build our schema, log the error and exit the process.
        catch (error) {
            return handleFatalError(error);
        }
    }
    async function exportGqlSchema(newGqlSchema) {
        try {
            await exportPostGraphileSchema_1.default(newGqlSchema, options);
        }
        // If we fail to export our schema, log the error and exit the process.
        catch (error) {
            handleFatalError(error);
        }
    }
}
exports.getPostgraphileSchemaBuilder = getPostgraphileSchemaBuilder;
function postgraphile(poolOrConfig, schemaOrOptions, maybeOptions) {
    let schema;
    let options;
    // If the second argument is undefined, use defaults for both `schema` and
    // `options`.
    if (typeof schemaOrOptions === 'undefined') {
        schema = 'public';
        options = {};
    }
    else if (typeof schemaOrOptions === 'string' || Array.isArray(schemaOrOptions)) {
        schema = schemaOrOptions;
        options = maybeOptions || {};
    }
    else {
        schema = 'public';
        options = schemaOrOptions;
    }
    // Do some things with `poolOrConfig` so that in the end, we actually get a
    // Postgres pool.
    const pgPool = 
    // If it is already a `Pool`, just use it.
    poolOrConfig instanceof pg_1.Pool || quacksLikePgPool(poolOrConfig)
        ? poolOrConfig
        : new pg_1.Pool(typeof poolOrConfig === 'string'
            ? pg_connection_string_1.parse(poolOrConfig)
            : poolOrConfig || {});
    const { getGraphQLSchema, _emitter } = getPostgraphileSchemaBuilder(pgPool, schema, options);
    return createPostGraphileHttpRequestHandler_1.default(Object.assign({}, options, {
        getGqlSchema: getGraphQLSchema,
        pgPool,
        _emitter,
    }));
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = postgraphile;
function handleFatalError(error) {
    process.stderr.write(`${error.stack}\n`); // console.error fails under the tests
    process.exit(1);
    // `process.exit` will mean all code below it will never get called.
    // However, we need to return a value with type `never` here for
    // TypeScript.
    return null;
}
function constructorName(obj) {
    return obj && typeof obj.constructor === 'function' && obj.constructor.name && String(obj.constructor.name) || null;
}
// tslint:disable-next-line no-any
function quacksLikePgPool(pgConfig) {
    // A diagnosis of exclusion
    if (!pgConfig || typeof pgConfig !== 'object')
        return false;
    if (constructorName(pgConfig) !== 'Pool' && constructorName(pgConfig) !== 'BoundPool')
        return false;
    if (!pgConfig['Client'])
        return false;
    if (!pgConfig['options'])
        return false;
    if (typeof pgConfig['connect'] !== 'function')
        return false;
    if (typeof pgConfig['end'] !== 'function')
        return false;
    if (typeof pgConfig['query'] !== 'function')
        return false;
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdGdyYXBoaWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Bvc3RncmFwaGlsZS9wb3N0Z3JhcGhpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJCQUFxQztBQUNyQywrREFBdUU7QUFFdkUsbUNBQXFDO0FBQ3JDLHlEQUFxRjtBQUNyRixzR0FBc0g7QUFDdEgsZ0ZBQXdFO0FBSXhFLDZDQUFrRTtBQXFLbEU7Ozs7R0FJRztBQUNILHNDQUE2QyxNQUFZLEVBQUUsTUFBOEIsRUFBRSxlQUFvQztJQUM3SCxNQUFNLFVBQVUsR0FBRyxrQ0FBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUN6RCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsc0JBQXNCLEVBQUUsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDdkYsc0RBQXNEO0lBQ3RELDREQUE0RDtJQUM1RCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUN0RCxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLElBQUksQ0FBQywyRkFBMkYsQ0FBQyxDQUFBO0lBQzNHLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQTtJQUNuRixDQUFDO0lBRUQsc0NBQXNDO0lBQ3RDLE1BQU0sU0FBUyxHQUFrQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTFFLE1BQU0sUUFBUSxHQUFHLElBQUkscUJBQVksRUFBRSxDQUFBO0lBRW5DLHVFQUF1RTtJQUN2RSxtREFB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
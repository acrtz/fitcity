"use strict";
const identityHook = (input) => input;
const identityPluginHook = (_hookName, input) => input;
function contextIsSame(context1, context2) {
    // Shortcut if obvious
    if (context1 === context2) {
        return true;
    }
    // Blacklist approach from now on
    const keys1 = Object.keys(context1);
    const keys2 = Object.keys(context2);
    if (keys1.length !== keys2.length) {
        return false;
    }
    // tslint:disable-next-line one-variable-per-declaration
    for (let i = 0, l = keys1.length; i < l; i++) {
        const key = keys1[i];
        if (context1[key] !== context2[key]) {
            return false;
        }
        if (keys2.indexOf(key) === -1) {
            return false;
        }
    }
    return true;
}
// Caches the last value of the hook, in case it's called with exactly the same
// arguments again.
function memoizeHook(hook) {
    let lastCall = null;
    return (argument, context) => {
        if (lastCall && lastCall.argument === argument && contextIsSame(lastCall.context, context)) {
            return lastCall.result;
        }
        else {
            const result = hook(argument, context);
            lastCall = {
                argument,
                context,
                result,
            };
            return result;
        }
    };
}
function makeHook(plugins, hookName) {
    return memoizeHook(plugins.reduce((previousHook, plugin) => {
        if (typeof plugin[hookName] === 'function') {
            return (argument, context) => {
                return plugin[hookName](previousHook(argument, context), context);
            };
        }
        else {
            return previousHook;
        }
    }, identityHook));
}
function makePluginHook(plugins) {
    const hooks = {};
    const emptyObject = {}; // caching this makes memoization faster when no context is needed
    function rawPluginHook(hookName, argument, context = emptyObject) {
        if (!hooks[hookName]) {
            hooks[hookName] = makeHook(plugins, hookName);
        }
        return hooks[hookName](argument, context);
    }
    const pluginHook = rawPluginHook('pluginHook', rawPluginHook, {});
    return pluginHook;
}
exports.makePluginHook = makePluginHook;
function pluginHookFromOptions(options) {
    if (typeof options.pluginHook === 'function') {
        return options.pluginHook;
    }
    else {
        return identityPluginHook;
    }
}
exports.pluginHookFromOptions = pluginHookFromOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luSG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wb3N0Z3JhcGhpbGUvcGx1Z2luSG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBOEJBLE1BQU0sWUFBWSxHQUFHLENBQUksS0FBUSxLQUFRLEtBQUssQ0FBQTtBQUM5QyxNQUFNLGtCQUFrQixHQUFHLENBQUksU0FBbUIsRUFBRSxLQUFRLEtBQVEsS0FBSyxDQUFBO0FBRXpFLHVCQUF1QixRQUFZLEVBQUUsUUFBWTtJQUMvQyxzQkFBc0I7SUFDdEIsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUNiLENBQUM7SUFDRCxpQ0FBaUM7SUFDakMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNuQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFDRCx3REFBd0Q7SUFDeEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM3QyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDcEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FB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
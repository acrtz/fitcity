{"version":3,"sources":["../src/index.js"],"names":["constantCaseAll","formatInsideUnderscores","upperFirst","camelCase","constantCase","upperCamelCase","pluralize","singularize","getBuilder","plugins","options","builder","plugin","Error","inspect","_setPluginName","displayName","name","buildSchema","defaultPlugins","StandardTypesPlugin","NodePlugin","QueryPlugin","MutationPlugin","ClientMutationIdDescriptionPlugin","MutationPayloadQueryPlugin","resolveNode"],"mappings":";;;;;;;;;;;;kBAmBEA,e;;;;;;kBACAC,uB;;;;;;kBACAC,U;;;;;;kBACAC,S;;;;;;kBACAC,Y;;;;;;kBACAC,c;;;;;;kBACAC,S;;;;;;kBACAC,W;;;;AAxBF;;;;AACA;;;;AACA;;AASA;;;;;;AA4BO,MAAMC,kCAAa,OACxBC,OADwB,EAExBC,UAAmB,EAFK,KAGG;AAC3B,QAAMC,UAAU,6BAAhB;AACA,OAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,QAAI,OAAOG,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CACJ,iFACE,eAAKC,OAAL,CAAaF,MAAb,CAFE,CAAN;AAID;AACDD,YAAQI,cAAR,CAAuBH,OAAOI,WAAP,IAAsBJ,OAAOK,IAApD;AACA,UAAML,OAAOD,OAAP,EAAgBD,OAAhB,CAAN;AACAC,YAAQI,cAAR,CAAuB,IAAvB;AACD;AACD,SAAOJ,OAAP;AACD,CAjBM;;AAmBA,MAAMO,oCAAc,OACzBT,OADyB,EAEzBC,UAAmB,EAFM,KAGE;AAC3B,QAAMC,UAAyB,MAAMH,WAAWC,OAAX,EAAoBC,OAApB,CAArC;AACA,SAAOC,QAAQO,WAAR,EAAP;AACD,CANM;;AAQA,MAAMC,0CAAgC,gNAAtC;;QAWLC,mB;QACAC,U;QACAC,W;QACAC,c;QACAC,iC;QACAC,0B;QAEAC,W","file":"index.js","sourcesContent":["// @flow\n\nimport util from \"util\";\nimport SchemaBuilder from \"./SchemaBuilder\";\nimport {\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n} from \"./plugins\";\nimport resolveNode from \"./resolveNode\";\nimport type { GraphQLSchema } from \"graphql\";\n\nimport type { Plugin, Options } from \"./SchemaBuilder\";\n\nexport {\n  constantCaseAll,\n  formatInsideUnderscores,\n  upperFirst,\n  camelCase,\n  constantCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n} from \"./utils\";\n\nexport type {\n  Plugin,\n  Options,\n  Build,\n  BuildExtensionQuery,\n  Scope,\n  Context,\n  Hook,\n  WatchUnwatch,\n  SchemaListener,\n} from \"./SchemaBuilder\";\n\nexport const getBuilder = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<SchemaBuilder> => {\n  const builder = new SchemaBuilder();\n  for (const plugin of plugins) {\n    if (typeof plugin !== \"function\") {\n      throw new Error(\n        \"Expected a list of plugin functions, instead list contained a non-function: \" +\n          util.inspect(plugin)\n      );\n    }\n    builder._setPluginName(plugin.displayName || plugin.name);\n    await plugin(builder, options);\n    builder._setPluginName(null);\n  }\n  return builder;\n};\n\nexport const buildSchema = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<GraphQLSchema> => {\n  const builder: SchemaBuilder = await getBuilder(plugins, options);\n  return builder.buildSchema();\n};\n\nexport const defaultPlugins: Array<Plugin> = [\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n];\n\nexport {\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n  // resolveNode: EXPERIMENTAL, API might change!\n  resolveNode,\n};\n"]}
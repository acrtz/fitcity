{"version":3,"sources":["../src/resolveNode.js"],"names":["base64Decode","str","Buffer","String","toString","resolveNode","nodeId","build","getDataFromParsedResolveInfoFragment","data","context","resolveInfo","$$isQuery","$$nodeType","parseResolveInfo","nodeFetcherByTypeName","getNodeType","graphql","getNamedType","alias","identifiers","JSON","parse","Type","Error","resolver","name","parsedResolveInfoFragment","resolveData","node","returnType","Object","defineProperty","enumerable","configurable","value","e"],"mappings":";;;;;AAAA,MAAMA,eAAeC,OAAO,IAAIC,MAAJ,CAAWC,OAAOF,GAAP,CAAX,EAAwB,QAAxB,EAAkCG,QAAlC,CAA2C,MAA3C,CAA5B;;kBAEe,eAAeC,WAAf,CACbC,MADa,EAEbC,KAFa,EAGb,EAAEC,oCAAF,EAHa,EAIbC,IAJa,EAKbC,OALa,EAMbC,WANa,EAOb;AACA,QAAM;AACJC,aADI;AAEJC,cAFI;AAGJC,oBAHI;AAIJC,yBAJI;AAKJC,eALI;AAMJC,aAAS,EAAEC,YAAF;AANL,MAOFX,KAPJ;AAQA,MAAID,WAAW,OAAf,EAAwB;AACtB,WAAOM,SAAP;AACD;AACD,MAAI;AACF,UAAM,CAACO,KAAD,EAAQ,GAAGC,WAAX,IAA0BC,KAAKC,KAAL,CAAWtB,aAAaM,MAAb,CAAX,CAAhC;AACA,UAAMiB,OAAOP,YAAYG,KAAZ,CAAb;AACA,QAAI,CAACI,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;AACD,UAAMC,WAAWV,sBAAsBG,aAAaK,IAAb,EAAmBG,IAAzC,CAAjB;AACA,UAAMC,4BAA4Bb,iBAAiBH,WAAjB,EAA8B,EAA9B,EAAkCY,IAAlC,CAAlC;AACA,UAAMK,cAAcpB,qCAClBmB,yBADkB,EAElBT,aAAaK,IAAb,CAFkB,CAApB;AAIA,UAAMM,OAAO,MAAMJ,SACjBhB,IADiB,EAEjBW,WAFiB,EAGjBV,OAHiB,EAIjBiB,yBAJiB,EAKjBhB,YAAYmB,UALK,EAMjBF,WANiB,CAAnB;AAQAG,WAAOC,cAAP,CAAsBH,IAAtB,EAA4BhB,UAA5B,EAAwC;AACtCoB,kBAAY,KAD0B;AAEtCC,oBAAc,KAFwB;AAGtCC,aAAOZ;AAH+B,KAAxC;AAKA,WAAOM,IAAP;AACD,GA1BD,CA0BE,OAAOO,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,C","file":"resolveNode.js","sourcesContent":["const base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\n\nexport default async function resolveNode(\n  nodeId,\n  build,\n  { getDataFromParsedResolveInfoFragment },\n  data,\n  context,\n  resolveInfo\n) {\n  const {\n    $$isQuery,\n    $$nodeType,\n    parseResolveInfo,\n    nodeFetcherByTypeName,\n    getNodeType,\n    graphql: { getNamedType },\n  } = build;\n  if (nodeId === \"query\") {\n    return $$isQuery;\n  }\n  try {\n    const [alias, ...identifiers] = JSON.parse(base64Decode(nodeId));\n    const Type = getNodeType(alias);\n    if (!Type) {\n      throw new Error(\"Type not found\");\n    }\n    const resolver = nodeFetcherByTypeName[getNamedType(Type).name];\n    const parsedResolveInfoFragment = parseResolveInfo(resolveInfo, {}, Type);\n    const resolveData = getDataFromParsedResolveInfoFragment(\n      parsedResolveInfoFragment,\n      getNamedType(Type)\n    );\n    const node = await resolver(\n      data,\n      identifiers,\n      context,\n      parsedResolveInfoFragment,\n      resolveInfo.returnType,\n      resolveData\n    );\n    Object.defineProperty(node, $$nodeType, {\n      enumerable: false,\n      configurable: false,\n      value: Type,\n    });\n    return node;\n  } catch (e) {\n    return null;\n  }\n}\n"]}
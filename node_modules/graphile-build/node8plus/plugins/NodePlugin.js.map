{"version":3,"sources":["../../src/plugins/NodePlugin.js"],"names":["base64","str","Buffer","String","toString","NodePlugin","builder","nodeIdFieldName","inNodeIdFieldName","hook","build","nodeFetcherByTypeName","nodeAliasByTypeName","nodeTypeNameByAlias","extend","$$nodeType","Symbol","getNodeIdForTypeAndIdentifiers","Type","identifiers","JSON","stringify","getNodeAlias","addNodeFetcherForTypeName","typeName","fetcher","Error","getNodeType","alias","getTypeByName","setNodeAlias","defineNodeInterfaceType","_","$$isQuery","newWithHooks","graphql","GraphQLNonNull","GraphQLID","GraphQLInterfaceType","getNullableType","name","description","resolveType","value","fields","type","addNodeIdToQuery","interfaces","context","scope","isRootQuery","fieldWithHooks","resolve","node","getDataFromParsedResolveInfoFragment","args","data","resolveInfo","nodeId","isRootNodeField"],"mappings":"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","file":"NodePlugin.js","sourcesContent":["// @flow\nimport type {\n  Plugin,\n  Build,\n  DataForType,\n  Context,\n  ContextGraphQLObjectTypeFields,\n} from \"../SchemaBuilder\";\nimport resolveNode from \"../resolveNode\";\nimport type { ResolveTree } from \"graphql-parse-resolve-info\";\nimport type { GraphQLType, GraphQLInterfaceType } from \"graphql\";\nimport type { BuildExtensionQuery } from \"./QueryPlugin\";\n\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport type NodeFetcher = (\n  data: mixed,\n  identifiers: Array<mixed>,\n  context: mixed,\n  parsedResolveInfoFragment: ResolveTree,\n  type: GraphQLType,\n  resolveData: DataForType\n) => {};\n\nexport type BuildExtensionNode = {|\n  nodeIdFieldName: string,\n  $$nodeType: Symbol,\n  nodeFetcherByTypeName: { [string]: NodeFetcher },\n  getNodeIdForTypeAndIdentifiers(\n    Type: GraphQLType,\n    ...identifiers: Array<mixed>\n  ): string,\n  addNodeFetcherForTypeName(typeName: string, fetcher: NodeFetcher): void,\n  getNodeAlias(typeName: string): string,\n  getNodeType(alias: string): GraphQLType,\n  setNodeAlias(typeName: string, alias: string): void,\n|};\n\nexport default (function NodePlugin(\n  builder,\n  { nodeIdFieldName: inNodeIdFieldName }\n) {\n  const nodeIdFieldName: string = inNodeIdFieldName\n    ? String(inNodeIdFieldName)\n    : \"id\";\n  builder.hook(\"build\", (build: Build): Build & BuildExtensionNode => {\n    const nodeFetcherByTypeName = {};\n    const nodeAliasByTypeName = {};\n    const nodeTypeNameByAlias = {};\n    return build.extend(\n      build,\n      {\n        nodeIdFieldName,\n        $$nodeType: Symbol(\"nodeType\"),\n        nodeFetcherByTypeName,\n        getNodeIdForTypeAndIdentifiers(Type, ...identifiers) {\n          return base64(\n            JSON.stringify([this.getNodeAlias(Type), ...identifiers])\n          );\n        },\n        addNodeFetcherForTypeName(typeName, fetcher) {\n          if (nodeFetcherByTypeName[typeName]) {\n            throw new Error(\"There's already a fetcher for this type\");\n          }\n          if (!fetcher) {\n            throw new Error(\"No fetcher specified\");\n          }\n          nodeFetcherByTypeName[typeName] = fetcher;\n        },\n        getNodeAlias(typeName) {\n          return nodeAliasByTypeName[typeName] || typeName;\n        },\n        getNodeType(alias) {\n          return this.getTypeByName(nodeTypeNameByAlias[alias] || alias);\n        },\n        setNodeAlias(typeName, alias) {\n          nodeAliasByTypeName[typeName] = alias;\n          nodeTypeNameByAlias[alias] = typeName;\n        },\n      },\n      `Adding 'Node' interface support to the Build`\n    );\n  });\n\n  builder.hook(\"init\", function defineNodeInterfaceType(\n    _: {},\n    build: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |}\n  ) {\n    const {\n      $$isQuery,\n      $$nodeType,\n      getTypeByName,\n      newWithHooks,\n      graphql: {\n        GraphQLNonNull,\n        GraphQLID,\n        GraphQLInterfaceType,\n        getNullableType,\n      },\n    } = build;\n    newWithHooks(\n      GraphQLInterfaceType,\n      {\n        name: \"Node\",\n        description: \"An object with a globally unique `ID`.\",\n        resolveType: value => {\n          if (value === $$isQuery) {\n            return getTypeByName(\"Query\");\n          } else if (value[$$nodeType]) {\n            return getNullableType(value[$$nodeType]);\n          }\n        },\n        fields: {\n          [nodeIdFieldName]: {\n            description:\n              \"A globally unique identifier. Can be used in various places throughout the system to identify this single value.\",\n            type: new GraphQLNonNull(GraphQLID),\n          },\n        },\n      },\n      {}\n    );\n    return _;\n  });\n\n  builder.hook(\"GraphQLObjectType:interfaces\", function addNodeIdToQuery(\n    interfaces: Array<GraphQLInterfaceType>,\n    build,\n    context\n  ) {\n    const { getTypeByName } = build;\n    const { scope: { isRootQuery } } = context;\n    if (!isRootQuery) {\n      return interfaces;\n    }\n    const Type = getTypeByName(\"Node\");\n    if (Type) {\n      return [...interfaces, Type];\n    } else {\n      return interfaces;\n    }\n  });\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields: {},\n      build: {| ...Build, ...BuildExtensionQuery, ...BuildExtensionNode |},\n      context: {| ...Context, ...ContextGraphQLObjectTypeFields |}\n    ) => {\n      const { scope: { isRootQuery }, fieldWithHooks } = context;\n      if (!isRootQuery) {\n        return fields;\n      }\n      const {\n        getTypeByName,\n        extend,\n        graphql: { GraphQLNonNull, GraphQLID },\n      } = build;\n      return extend(\n        fields,\n        {\n          [nodeIdFieldName]: {\n            description:\n              \"The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\",\n            type: new GraphQLNonNull(GraphQLID),\n            resolve() {\n              return \"query\";\n            },\n          },\n          node: fieldWithHooks(\n            \"node\",\n            ({ getDataFromParsedResolveInfoFragment }) => ({\n              description: \"Fetches an object given its globally unique `ID`.\",\n              type: getTypeByName(\"Node\"),\n              args: {\n                [nodeIdFieldName]: {\n                  description: \"The globally unique `ID`.\",\n                  type: new GraphQLNonNull(GraphQLID),\n                },\n              },\n              resolve(data, args, context, resolveInfo) {\n                const nodeId = args[nodeIdFieldName];\n                return resolveNode(\n                  nodeId,\n                  build,\n                  { getDataFromParsedResolveInfoFragment },\n                  data,\n                  context,\n                  resolveInfo\n                );\n              },\n            }),\n            {\n              isRootNodeField: true,\n            }\n          ),\n        },\n        `Adding node helpers to the root Query`\n      );\n    }\n  );\n}: Plugin);\n"]}
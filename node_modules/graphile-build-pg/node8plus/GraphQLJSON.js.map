{"version":3,"sources":["../src/GraphQLJSON.js"],"names":["identity","value","parseLiteral","ast","variables","kind","STRING","BOOLEAN","INT","FLOAT","parseFloat","OBJECT","Object","create","fields","forEach","field","name","LIST","values","map","n","NULL","VARIABLE","undefined","GraphQLJSON","description","serialize","parseValue","GraphQLJson"],"mappings":";;;;;;;AA6BA;;AACA;;AA9BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAP;AACD;;AAED,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,SAA3B,EAAsC;AACpC,UAAQD,IAAIE,IAAZ;AACE,SAAK,eAAKC,MAAV;AACA,SAAK,eAAKC,OAAV;AACE,aAAOJ,IAAIF,KAAX;AACF,SAAK,eAAKO,GAAV;AACA,SAAK,eAAKC,KAAV;AACE,aAAOC,WAAWP,IAAIF,KAAf,CAAP;AACF,SAAK,eAAKU,MAAV;AAAkB;AAChB,cAAMV,QAAQW,OAAOC,MAAP,CAAc,IAAd,CAAd;AACAV,YAAIW,MAAJ,CAAWC,OAAX,CAAmBC,SAAS;AAC1Bf,gBAAMe,MAAMC,IAAN,CAAWhB,KAAjB,IAA0BC,aAAac,MAAMf,KAAnB,EAA0BG,SAA1B,CAA1B;AACD,SAFD;;AAIA,eAAOH,KAAP;AACD;AACD,SAAK,eAAKiB,IAAV;AACE,aAAOf,IAAIgB,MAAJ,CAAWC,GAAX,CAAeC,KAAKnB,aAAamB,CAAb,EAAgBjB,SAAhB,CAApB,CAAP;AACF,SAAK,eAAKkB,IAAV;AACE,aAAO,IAAP;AACF,SAAK,eAAKC,QAAV;AAAoB;AAClB,cAAMN,OAAOd,IAAIc,IAAJ,CAAShB,KAAtB;AACA,eAAOG,YAAYA,UAAUa,IAAV,CAAZ,GAA8BO,SAArC;AACD;AACD;AACE,aAAOA,SAAP;AAxBJ;AA0BD;;AAEM,MAAMC,oCAAc,+BAAsB;AAC/CR,QAAM,MADyC;AAE/CS,eACE,mEACA,+CADA,GAEA,2CAL6C;AAM/CC,aAAW3B,QANoC;AAO/C4B,cAAY5B,QAPmC;AAQ/CE;AAR+C,CAAtB,CAApB;;AAWA,MAAM2B,oCAAc,+BAAsB;AAC/CZ,QAAM,MADyC;AAE/CS,eACE,mEACA,+CADA,GAEA,2CAL6C;AAM/CC,aAAW3B,QANoC;AAO/C4B,cAAY5B,QAPmC;AAQ/CE;AAR+C,CAAtB,CAApB","file":"GraphQLJSON.js","sourcesContent":["// This file is based on\n// https://github.com/taion/graphql-type-json/blob/6e45ae4ee0a60f8f3565c8c980a82c7d9b98d3f5/src/index.js\n//\n// It only exists here (rather than using `graphql-type-json` directly) because\n// we need to export Json along with JSON.\n//\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Jimmy Jia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nimport { GraphQLScalarType } from \"graphql\";\nimport { Kind } from \"graphql/language\";\n\nfunction identity(value) {\n  return value;\n}\n\nfunction parseLiteral(ast, variables) {\n  switch (ast.kind) {\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.INT:\n    case Kind.FLOAT:\n      return parseFloat(ast.value);\n    case Kind.OBJECT: {\n      const value = Object.create(null);\n      ast.fields.forEach(field => {\n        value[field.name.value] = parseLiteral(field.value, variables);\n      });\n\n      return value;\n    }\n    case Kind.LIST:\n      return ast.values.map(n => parseLiteral(n, variables));\n    case Kind.NULL:\n      return null;\n    case Kind.VARIABLE: {\n      const name = ast.name.value;\n      return variables ? variables[name] : undefined;\n    }\n    default:\n      return undefined;\n  }\n}\n\nexport const GraphQLJSON = new GraphQLScalarType({\n  name: \"JSON\",\n  description:\n    \"The `JSON` scalar type represents JSON values as specified by \" +\n    \"[ECMA-404](http://www.ecma-international.org/\" +\n    \"publications/files/ECMA-ST/ECMA-404.pdf).\",\n  serialize: identity,\n  parseValue: identity,\n  parseLiteral,\n});\n\nexport const GraphQLJson = new GraphQLScalarType({\n  name: \"Json\",\n  description:\n    \"The `Json` scalar type represents JSON values as specified by \" +\n    \"[ECMA-404](http://www.ecma-international.org/\" +\n    \"publications/files/ECMA-ST/ECMA-404.pdf).\",\n  serialize: identity,\n  parseValue: identity,\n  parseLiteral,\n});\n"]}
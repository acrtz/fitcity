"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _QueryBuilder = require("./QueryBuilder");

var _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);

var _pgSql = require("pg-sql2");

var _pgSql2 = _interopRequireDefault(_pgSql);

var _isSafeInteger = require("lodash/isSafeInteger");

var _isSafeInteger2 = _interopRequireDefault(_isSafeInteger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const identity = _ => _ !== null && _ !== undefined;

exports.default = (from, fromAlias, resolveData, options, withBuilder) => {
  const {
    pgQuery,
    pgCursorPrefix: reallyRawCursorPrefix,
    pgCalculateTotalCount,
    calculateHasNextPage,
    calculateHasPreviousPage,
    usesCursor: explicitlyUsesCursor
  } = resolveData;

  const usesCursor = explicitlyUsesCursor && explicitlyUsesCursor.length > 0 || calculateHasNextPage && calculateHasNextPage.length > 0 || calculateHasPreviousPage && calculateHasPreviousPage.length > 0 || false;
  const rawCursorPrefix = reallyRawCursorPrefix && reallyRawCursorPrefix.filter(identity);

  const queryBuilder = new _QueryBuilder2.default();
  queryBuilder.from(from, fromAlias ? fromAlias : undefined);

  for (const fn of pgQuery || []) {
    fn(queryBuilder, resolveData);
  }
  if (withBuilder) {
    withBuilder(queryBuilder);
  }

  function generateNextPrevPageSql(sqlQueryAlias, canHaveCursorInWhere, queryHasBefore, queryHasFirst, offset = 0, invert = false) {
    // if invert is true queryHasBefore means queryHasAfter; queryHasFirst means queryHasLast; etc
    const sqlCommon = _pgSql2.default.fragment`
      select 1
      from ${queryBuilder.getTableExpression()} as ${queryBuilder.getTableAlias()}
      where ${queryBuilder.buildWhereClause(!invert, invert, options)}
    `;
    if (!queryHasBefore && !queryHasFirst && (!invert || offset === 0)) {
      // There can be no next page since there's no upper bound
      return _pgSql2.default.literal(false);
    } else if (queryHasBefore && (!invert || offset === 0)) {
      // Simply see if there are any records after the before cursor
      return _pgSql2.default.fragment`exists(
        ${sqlCommon}
        and not (${queryBuilder.buildWhereBoundClause(invert)})
      )`;
    } else if (canHaveCursorInWhere && (!invert || offset === 0)) {
      // Query must have "first"
      // Drop the limit, see if there are any records that aren't already in the list we've fetched
      return _pgSql2.default.fragment`exists(
        ${sqlCommon}
        and (${queryBuilder.getSelectCursor()})::text not in (select __cursor::text from ${sqlQueryAlias})
        ${offset === 0 ? _pgSql2.default.blank : _pgSql2.default.fragment`offset ${_pgSql2.default.value(offset)}`}
      )`;
    } else {
      if (!invert) {
        // Skip over the already known entries, are there any left?
        return _pgSql2.default.fragment`exists(
          ${sqlCommon}
          offset (select coalesce((select count(*) from ${sqlQueryAlias}), 0) + ${_pgSql2.default.value(offset)})
        )`;
      } else {
        // Things get somewhat more complex here... Let's just assume if offset > 0 there's a previous page.
        if (offset > 0) {
          return _pgSql2.default.literal(true);
        }
        // And here (offset === 0 && invert) so we'd have hit an earlier case; since we haven't there must be no previous page.
        return _pgSql2.default.literal(false);
      }
    }
  }
  const getPgCursorPrefix = () => rawCursorPrefix && rawCursorPrefix.length > 0 ? rawCursorPrefix : queryBuilder.data.cursorPrefix.map(val => _pgSql2.default.literal(val));
  if (options.withPagination || options.withPaginationAsFields || options.withCursor) {
    // Sometimes we need a __cursor even if it's not a collection; e.g. to get the edge field on a mutation
    if (usesCursor) {
      queryBuilder.selectCursor(() => {
        const orderBy = queryBuilder.getOrderByExpressionsAndDirections().map(([expr]) => expr);
        if (queryBuilder.isOrderUnique() && orderBy.length > 0) {
          return _pgSql2.default.fragment`json_build_array(${_pgSql2.default.join([...getPgCursorPrefix(), _pgSql2.default.fragment`json_build_array(${_pgSql2.default.join(orderBy, ", ")})`], ", ")})`;
        } else {
          return _pgSql2.default.fragment`json_build_array(${_pgSql2.default.join(getPgCursorPrefix(), ", ")}, (row_number() over (partition by 1)))`;
        }
      });
    }
  }
  if (options.withPagination || options.withPaginationAsFields) {
    queryBuilder.setCursorComparator((cursorValue, isAfter) => {
      const orderByExpressionsAndDirections = queryBuilder.getOrderByExpressionsAndDirections();
      if (orderByExpressionsAndDirections.length > 0 && queryBuilder.isOrderUnique()) {
        const sqlCursors = cursorValue[getPgCursorPrefix().length].map(val => _pgSql2.default.value(val));
        if (!Array.isArray(sqlCursors)) {
          queryBuilder.whereBound(_pgSql2.default.literal(false), isAfter);
        }
        let sqlFilter = _pgSql2.default.fragment`false`;
        for (let i = orderByExpressionsAndDirections.length - 1; i >= 0; i--) {
          const [sqlExpression, ascending] = orderByExpressionsAndDirections[i];
          // If ascending and isAfter then >
          // If ascending and isBefore then <
          const comparison = Number(ascending) ^ Number(!isAfter) ? _pgSql2.default.fragment`>` : _pgSql2.default.fragment`<`;

          const sqlOldFilter = sqlFilter;
          sqlFilter = _pgSql2.default.fragment`
          (
            (
              ${sqlExpression} ${comparison} ${sqlCursors[i] || _pgSql2.default.null}
            )
          OR
            (
              (
                ${sqlExpression} = ${sqlCursors[i] || _pgSql2.default.null}
              AND
                ${sqlOldFilter}
              )
            )
          )
          `;
        }
        queryBuilder.whereBound(sqlFilter, isAfter);
      } else if (cursorValue[0] === "natural" && (0, _isSafeInteger2.default)(cursorValue[1]) && cursorValue[1] >= 0) {
        if (isAfter) {
          queryBuilder.offset(() => cursorValue[1]);
        } else {
          queryBuilder.limit(() => {
            const offset = queryBuilder.getOffset();
            return Math.max(0, cursorValue[1] - offset - 1);
          });
        }
      } else {
        throw new Error("Cannot use cursors without orderBy");
      }
    });

    const query = queryBuilder.build(options);
    const haveFields = queryBuilder.getSelectFieldsCount() > 0;
    const sqlQueryAlias = _pgSql2.default.identifier(Symbol());
    const sqlSummaryAlias = _pgSql2.default.identifier(Symbol());
    //
    // Tables should ALWAYS push their PK onto the order stack, if this isn't
    // present then we're either dealing with a view or a table without a PK.
    // Either way, we don't have anything to guarantee uniqueness so we need to
    // fall back to limit/offset.
    //
    // TODO: support unique keys in PgAllRows etc
    // TODO: add a warning for cursor-based pagination when using the fallback
    // TODO: if it is a view maybe add a warning encouraging pgViewUniqueKey
    const canHaveCursorInWhere = queryBuilder.getOrderByExpressionsAndDirections().length > 0 && queryBuilder.isOrderUnique();
    const queryHasBefore = queryBuilder.compiledData.whereBound.upper.length > 0;
    const queryHasAfter = queryBuilder.compiledData.whereBound.lower.length > 0;
    const queryHasZeroLimit = queryBuilder.getFinalLimit() === 0;
    const queryHasFirst = (0, _isSafeInteger2.default)(queryBuilder.compiledData.first);
    const queryHasLast = (0, _isSafeInteger2.default)(queryBuilder.compiledData.last);
    const hasNextPage = queryHasZeroLimit ? _pgSql2.default.literal(false) : generateNextPrevPageSql(sqlQueryAlias, canHaveCursorInWhere, queryHasBefore, queryHasFirst, queryBuilder.getFinalOffset() || 0);
    const hasPreviousPage = queryHasZeroLimit ? _pgSql2.default.literal(false) : generateNextPrevPageSql(sqlQueryAlias, canHaveCursorInWhere, queryHasAfter, queryHasLast, queryBuilder.getFinalOffset() || 0, true);

    const totalCount = _pgSql2.default.fragment`(
      select count(*)
      from ${queryBuilder.getTableExpression()} as ${queryBuilder.getTableAlias()}
      where ${queryBuilder.buildWhereClause(false, false, options)}
    )`;
    const sqlWith = haveFields ? _pgSql2.default.fragment`with ${sqlQueryAlias} as (${query}), ${sqlSummaryAlias} as (select json_agg(to_json(${sqlQueryAlias})) as data from ${sqlQueryAlias})` : _pgSql2.default.fragment``;
    const sqlFrom = _pgSql2.default.fragment``;
    const fields = [];
    if (haveFields) {
      fields.push([_pgSql2.default.fragment`coalesce((select ${sqlSummaryAlias}.data from ${sqlSummaryAlias}), '[]'::json)`, "data"]);
      if (calculateHasNextPage) {
        fields.push([hasNextPage, "hasNextPage"]);
      }
      if (calculateHasPreviousPage) {
        fields.push([hasPreviousPage, "hasPreviousPage"]);
      }
    }
    if (pgCalculateTotalCount) {
      fields.push([totalCount, "totalCount"]);
    }
    if (options.withPaginationAsFields) {
      return _pgSql2.default.fragment`${sqlWith} select ${_pgSql2.default.join(fields.map(([expr, alias]) => _pgSql2.default.fragment`${expr} as ${_pgSql2.default.identifier(alias)}`), ", ")} ${sqlFrom}`;
    } else {
      return _pgSql2.default.fragment`${sqlWith} select json_build_object(${_pgSql2.default.join(fields.map(([expr, alias]) => _pgSql2.default.fragment`${_pgSql2.default.literal(alias)}::text, ${expr}`), ", ")}) ${sqlFrom}`;
    }
  } else {
    const query = queryBuilder.build(options);
    return query;
  }
};
//# sourceMappingURL=queryFromResolveData.js.map
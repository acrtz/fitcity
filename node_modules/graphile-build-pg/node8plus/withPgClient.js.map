{"version":3,"sources":["../src/withPgClient.js"],"names":["quacksLikePgPool","debug","constructorName","obj","constructor","name","quacksLikePgClient","pgConfig","connect","end","escapeLiteral","escapeIdentifier","Client","options","query","withPgClient","process","env","DATABASE_URL","fn","Error","releasePgClient","pgClient","result","release","Pool","pgPool","undefined","on","e","Promise","resolve","reject","err"],"mappings":"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","file":"withPgClient.js","sourcesContent":["// @flow\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\nconst debug = debugFactory(\"graphile-build-pg\");\n\nfunction constructorName(obj) {\n  return obj && typeof obj.constructor === \"function\" && obj.constructor.name;\n}\n\n// Some duck-typing\n\nfunction quacksLikePgClient(pgConfig: mixed): boolean {\n  // A diagnosis of exclusion\n  if (!pgConfig || typeof pgConfig !== \"object\") return false;\n  if (constructorName(pgConfig) !== \"Client\") return false;\n  if (typeof pgConfig.connect !== \"function\") return false;\n  if (typeof pgConfig.end !== \"function\") return false;\n  if (typeof pgConfig.escapeLiteral !== \"function\") return false;\n  if (typeof pgConfig.escapeIdentifier !== \"function\") return false;\n  return true;\n}\n\nexport function quacksLikePgPool(pgConfig: mixed): boolean {\n  // A diagnosis of exclusion\n  if (!pgConfig || typeof pgConfig !== \"object\") return false;\n  if (\n    constructorName(pgConfig) !== \"Pool\" &&\n    constructorName(pgConfig) !== \"BoundPool\"\n  ) {\n    return false;\n  }\n  if (!pgConfig.Client) return false;\n  if (!pgConfig.options) return false;\n  if (typeof pgConfig.connect !== \"function\") return false;\n  if (typeof pgConfig.end !== \"function\") return false;\n  if (typeof pgConfig.query !== \"function\") return false;\n  return true;\n}\n\nconst withPgClient = async (\n  pgConfig: pg.Client | pg.Pool | string = process.env.DATABASE_URL,\n  fn: (pgClient: pg.Client) => *\n) => {\n  if (!fn) {\n    throw new Error(\"Nothing to do!\");\n  }\n  let releasePgClient = () => {};\n  let pgClient: pg.Client;\n  let result;\n  try {\n    if (pgConfig instanceof pg.Client || quacksLikePgClient(pgConfig)) {\n      pgClient = (pgConfig: pg.Client);\n      if (!pgClient.release) {\n        throw new Error(\n          \"We only support PG clients from a PG pool (because otherwise the `await` call can hang indefinitely if an error occurs and there's no error handler)\"\n        );\n      }\n    } else if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n      const pgPool = (pgConfig: pg.Pool);\n      pgClient = await pgPool.connect();\n      releasePgClient = () => pgClient.release();\n    } else if (pgConfig === undefined || typeof pgConfig === \"string\") {\n      pgClient = new pg.Client(pgConfig);\n      pgClient.on(\"error\", e => {\n        debug(\"pgClient error occurred: %s\", e);\n      });\n      releasePgClient = () =>\n        new Promise((resolve, reject) =>\n          pgClient.end(err => (err ? reject(err) : resolve()))\n        );\n      await new Promise((resolve, reject) =>\n        pgClient.connect(err => (err ? reject(err) : resolve()))\n      );\n    } else {\n      throw new Error(\"You must provide a valid PG client configuration\");\n    }\n    result = await fn(pgClient);\n  } finally {\n    try {\n      await releasePgClient();\n    } catch (e) {\n      // Failed to release, assuming success\n    }\n  }\n  return result;\n};\n\nexport default withPgClient;\n"]}
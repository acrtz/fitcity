{"version":3,"sources":["../../src/plugins/PgScalarFunctionConnectionPlugin.js"],"names":["base64","str","Buffer","String","toString","PgScalarFunctionConnectionPlugin","builder","pgForbidSetofFunctionsToReturnNull","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeId","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLList","GraphQLString","inflection","nullableIf","condition","Type","Cursor","procedure","filter","proc","returnsSet","namespace","forEach","returnType","typeById","returnTypeId","returnTypeTable","classById","classId","NodeType","id","EdgeType","name","scalarFunctionEdge","description","fields","fieldWithHooks","cursor","addDataGenerator","usesCursor","type","resolve","data","JSON","stringify","__cursor","isCursorField","node","value","isEdgeType","nodeType","pgIntrospection","scalarFunctionConnection","recurseDataGeneratorsForField","nodes","map","entry","edges","isConnectionType","edgeType"],"mappings":"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","file":"PgScalarFunctionConnectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport omit from \"../omit\";\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport default (function PgScalarFunctionConnectionPlugin(\n  builder,\n  { pgForbidSetofFunctionsToReturnNull = false }\n) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      getTypeByName,\n      pgGetGqlTypeByTypeId,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLNonNull,\n        GraphQLList,\n        GraphQLString,\n      },\n      inflection,\n    } = build;\n    const nullableIf = (condition, Type) =>\n      condition ? Type : new GraphQLNonNull(Type);\n    const Cursor = getTypeByName(\"Cursor\");\n    introspectionResultsByKind.procedure\n      .filter(proc => proc.returnsSet)\n      .filter(proc => !!proc.namespace)\n      .filter(proc => !omit(proc, \"execute\"))\n      .forEach(proc => {\n        const returnType =\n          introspectionResultsByKind.typeById[proc.returnTypeId];\n        const returnTypeTable =\n          introspectionResultsByKind.classById[returnType.classId];\n        if (returnTypeTable) {\n          // Just use the standard table connection from PgTablesPlugin\n          return;\n        }\n        const NodeType = pgGetGqlTypeByTypeId(returnType.id) || GraphQLString;\n        const EdgeType = newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.scalarFunctionEdge(proc),\n            description: `A \\`${NodeType.name}\\` edge in the connection.`,\n            fields: ({ fieldWithHooks }) => {\n              return {\n                cursor: fieldWithHooks(\n                  \"cursor\",\n                  ({ addDataGenerator }) => {\n                    addDataGenerator(() => ({\n                      usesCursor: [true],\n                    }));\n                    return {\n                      description: \"A cursor for use in pagination.\",\n                      type: Cursor,\n                      resolve(data) {\n                        return base64(JSON.stringify(data.__cursor));\n                      },\n                    };\n                  },\n                  {\n                    isCursorField: true,\n                  }\n                ),\n                node: {\n                  description: `The \\`${\n                    NodeType.name\n                  }\\` at the end of the edge.`,\n                  type: NodeType,\n                  resolve(data) {\n                    return data.value;\n                  },\n                },\n              };\n            },\n          },\n          {\n            isEdgeType: true,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n        /*const ConnectionType = */\n        newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.scalarFunctionConnection(proc),\n            description: `A connection to a list of \\`${\n              NodeType.name\n            }\\` values.`,\n            fields: ({ recurseDataGeneratorsForField }) => {\n              recurseDataGeneratorsForField(\"edges\");\n              recurseDataGeneratorsForField(\"nodes\");\n              return {\n                nodes: {\n                  description: `A list of \\`${NodeType.name}\\` objects.`,\n                  type: new GraphQLNonNull(\n                    new GraphQLList(\n                      nullableIf(!pgForbidSetofFunctionsToReturnNull, NodeType)\n                    )\n                  ),\n                  resolve(data) {\n                    return data.data.map(entry => entry.value);\n                  },\n                },\n                edges: {\n                  description: `A list of edges which contains the \\`${\n                    NodeType.name\n                  }\\` and cursor to aid in pagination.`,\n                  type: new GraphQLNonNull(\n                    new GraphQLList(new GraphQLNonNull(EdgeType))\n                  ),\n                  resolve(data) {\n                    return data.data;\n                  },\n                },\n              };\n            },\n          },\n          {\n            isConnectionType: true,\n            edgeType: EdgeType,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n      });\n    return _;\n  });\n}: Plugin);\n"]}
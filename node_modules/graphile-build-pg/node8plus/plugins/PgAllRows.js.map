{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["debugSql","PgAllRows","builder","pgViewUniqueKey","viewUniqueKey","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeId","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","fieldWithHooks","scope","isRootQuery","class","filter","table","isSelectable","namespace","reduce","memo","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","attribute","attr","classId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","isView","t","classKind","uniqueIdAttribute","find","undefined","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","returnType","query","withPaginationAsFields","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","text","values","compile","enabled","result","rows","row","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport omit from \"../omit\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey: viewUniqueKey, pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      parseResolveInfo,\n      extend,\n      getTypeByName,\n      pgGetGqlTypeByTypeId,\n      pgSql: sql,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      inflection,\n      graphql: { GraphQLList, GraphQLNonNull },\n    } = build;\n    const { fieldWithHooks, scope: { isRootQuery } } = context;\n    if (!isRootQuery) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.class\n        .filter(table => table.isSelectable)\n        .filter(table => table.namespace)\n        .reduce((memo, table) => {\n          if (omit(table, \"all\")) {\n            return memo;\n          }\n          const TableType = pgGetGqlTypeByTypeId(table.type.id);\n          const tableTypeName = TableType.name;\n          const ConnectionType = getTypeByName(\n            inflection.connection(TableType.name)\n          );\n          if (!TableType) {\n            throw new Error(\n              `Could not find GraphQL type for table '${table.name}'`\n            );\n          }\n          const attributes = introspectionResultsByKind.attribute.filter(\n            attr => attr.classId === table.id\n          );\n          const primaryKeyConstraint = introspectionResultsByKind.constraint\n            .filter(con => con.classId === table.id)\n            .filter(con => con.type === \"p\")[0];\n          const primaryKeys =\n            primaryKeyConstraint &&\n            primaryKeyConstraint.keyAttributeNums.map(\n              num => attributes.filter(attr => attr.num === num)[0]\n            );\n          const isView = t => t.classKind === \"v\";\n          const uniqueIdAttribute = viewUniqueKey\n            ? attributes.find(attr => attr.name === viewUniqueKey)\n            : undefined;\n          if (!ConnectionType) {\n            throw new Error(\n              `Could not find GraphQL connection type for table '${table.name}'`\n            );\n          }\n          const schema = table.namespace;\n          const sqlFullTableName = sql.identifier(schema.name, table.name);\n          function makeField(isConnection) {\n            const fieldName = isConnection\n              ? inflection.allRows(table)\n              : inflection.allRowsSimple(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: isConnection\n                    ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                    : `Reads a set of \\`${tableTypeName}\\`.`,\n                  type: isConnection\n                    ? ConnectionType\n                    : new GraphQLList(new GraphQLNonNull(TableType)),\n                  args: {},\n                  async resolve(parent, args, { pgClient }, resolveInfo) {\n                    const parsedResolveInfoFragment = parseResolveInfo(\n                      resolveInfo\n                    );\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      resolveInfo.returnType\n                    );\n                    const query = queryFromResolveData(\n                      sqlFullTableName,\n                      undefined,\n                      resolveData,\n                      {\n                        withPaginationAsFields: isConnection,\n                      },\n                      builder => {\n                        if (primaryKeys) {\n                          builder.beforeLock(\"orderBy\", () => {\n                            if (!builder.isOrderUnique(false)) {\n                              // Order by PK if no order specified\n                              builder.data.cursorPrefix = [\"primary_key_asc\"];\n                              primaryKeys.forEach(key => {\n                                builder.orderBy(\n                                  sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )}`,\n                                  true\n                                );\n                              });\n                              builder.setOrderIsUnique();\n                            }\n                          });\n                        } else if (isView(table) && !!uniqueIdAttribute) {\n                          builder.beforeLock(\"orderBy\", () => {\n                            if (!builder.isOrderUnique(false)) {\n                              builder.data.cursorPrefix = [\n                                \"view_unique_key_asc\",\n                              ];\n                              builder.orderBy(\n                                sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                  uniqueIdAttribute.name\n                                )}`,\n                                true\n                              );\n                              builder.setOrderIsUnique();\n                            }\n                          });\n                        }\n                      }\n                    );\n                    const { text, values } = sql.compile(query);\n                    if (debugSql.enabled) debugSql(text);\n                    const result = await pgClient.query(text, values);\n                    if (isConnection) {\n                      const { rows: [row] } = result;\n                      return addStartEndCursor(row);\n                    } else {\n                      return result.rows;\n                    }\n                  },\n                };\n              },\n              {\n                isPgFieldConnection: isConnection,\n                isPgFieldSimpleCollection: !isConnection,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          if (TableType && ConnectionType && hasConnections) {\n            makeField(true);\n          }\n          if (TableType && hasSimpleCollections) {\n            makeField(false);\n          }\n          return memo;\n        }, {}),\n      `Adding 'all*' relations to root Query`\n    );\n  });\n}: Plugin);\n"]}
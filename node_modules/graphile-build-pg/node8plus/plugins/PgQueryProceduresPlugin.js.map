{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["debugWarn","PgQueryProceduresPlugin","builder","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","extend","inflection","pgIntrospectionResultsByKind","introspectionResultsByKind","scope","isRootQuery","fieldWithHooks","procedure","filter","proc","isStable","namespace","reduce","memo","argTypes","argTypeIds","map","typeId","typeById","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","makeField","forceList","fieldName","functionQueryNameList","functionQueryName","e","console","warn","bold","yellow","returnsSet"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,qBAAa,wBAAb,CAAlB;;kBAEgB,SAASC,uBAAT,CACdC,OADc,EAEd,EAAEC,mBAAF,EAFc,EAGd;AACA,QAAMC,iBAAiBD,wBAAwB,MAA/C;AACA,QAAME,uBACJF,wBAAwB,MAAxB,IAAkCA,wBAAwB,MAD5D;AAEAD,UAAQI,IAAR,CAAa,0BAAb,EAAyC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACnE,UAAM;AACJC,YADI;AAEJC,gBAFI;AAGJC,oCAA8BC;AAH1B,QAIFL,KAJJ;AAKA,UAAM,EAAEM,OAAO,EAAEC,WAAF,EAAT,EAA0BC,cAA1B,KAA6CP,OAAnD;AACA,QAAI,CAACM,WAAL,EAAkB;AAChB,aAAOR,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELM,2BAA2BI,SAA3B,CACGC,MADH,CACUC,QAAQA,KAAKC,QADvB,EAEGF,MAFH,CAEUC,QAAQ,CAAC,CAACA,KAAKE,SAFzB,EAGGH,MAHH,CAGUC,QAAQ,CAAC,oBAAKA,IAAL,EAAW,SAAX,CAHnB,EAIGG,MAJH,CAIU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB;;;;;;;;;;;;;;AAcA,YAAMK,WAAWL,KAAKM,UAAL,CAAgBC,GAAhB,CACfC,UAAUd,2BAA2Be,QAA3B,CAAoCD,MAApC,CADK,CAAjB;AAGA,UACEH,SAASK,IAAT,CACEC,QAAQA,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKC,KAA1B,IAAmCD,KAAKC,KAAL,CAAWC,YADxD,CADF,EAIE;AACA;AACA,eAAOT,IAAP;AACD;AACD,YAAMU,eAAeT,SAAS,CAAT,CAArB;AACA,UACES,gBACAA,aAAaH,IAAb,KAAsB,GADtB,IAEAG,aAAaF,KAFb,IAGAE,aAAaC,WAAb,KAA6Bf,KAAKe,WAHlC,IAIAf,KAAKgB,IAAL,CAAUC,UAAV,CAAsB,GAAEH,aAAaE,IAAK,GAA1C,CALF,EAME;AACA;AACA,eAAOZ,IAAP;AACD;;AAED,eAASc,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,cAAMC,YAAYD,YACd3B,WAAW6B,qBAAX,CAAiCrB,IAAjC,CADc,GAEdR,WAAW8B,iBAAX,CAA6BtB,IAA7B,CAFJ;AAGA,YAAI;AACFI,eAAKgB,SAAL,IAAkB,6BAAcA,SAAd,EAAyBpB,IAAzB,EAA+BX,KAA/B,EAAsC;AACtDQ,0BADsD;AAEtDsB;AAFsD,WAAtC,CAAlB;AAID,SALD,CAKE,OAAOI,CAAP,EAAU;AACV;AACAC,kBAAQC,IAAR,CACE,gBAAMC,IAAN,CAAWC,MAAX,CACG,2BAA0B3B,KAAKE,SAAL,CAAec,IAAK,IAC7ChB,KAAKgB,IACN,gEAHH,CADF;AAOAnC,oBAAU0C,CAAV;AACD;AACF;AACD,UAAI,CAACvB,KAAK4B,UAAN,IAAoB3C,cAAxB,EAAwC;AACtCiC,kBAAU,KAAV;AACD;AACD,UAAIlB,KAAK4B,UAAL,IAAmB1C,oBAAvB,EAA6C;AAC3CgC,kBAAU,IAAV;AACD;AACD,aAAOd,IAAP;AACD,KAtEH,EAsEK,EAtEL,CAFK,EAyEJ,4CAzEI,CAAP;AA2ED,GArFD;AAsFD,C","file":"PgQueryProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport makeProcField from \"./makeProcField\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport omit from \"../omit\";\n\nconst debugWarn = debugFactory(\"graphile-build-pg:warn\");\n\nexport default (function PgQueryProceduresPlugin(\n  builder,\n  { pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      inflection,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n    } = build;\n    const { scope: { isRootQuery }, fieldWithHooks } = context;\n    if (!isRootQuery) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.procedure\n        .filter(proc => proc.isStable)\n        .filter(proc => !!proc.namespace)\n        .filter(proc => !omit(proc, \"execute\"))\n        .reduce((memo, proc) => {\n          /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n          const argTypes = proc.argTypeIds.map(\n            typeId => introspectionResultsByKind.typeById[typeId]\n          );\n          if (\n            argTypes.some(\n              type => type.type === \"c\" && type.class && type.class.isSelectable\n            )\n          ) {\n            // Selects a table, ignore!\n            return memo;\n          }\n          const firstArgType = argTypes[0];\n          if (\n            firstArgType &&\n            firstArgType.type === \"c\" &&\n            firstArgType.class &&\n            firstArgType.namespaceId === proc.namespaceId &&\n            proc.name.startsWith(`${firstArgType.name}_`)\n          ) {\n            // It's a computed field, skip\n            return memo;\n          }\n\n          function makeField(forceList) {\n            const fieldName = forceList\n              ? inflection.functionQueryNameList(proc)\n              : inflection.functionQueryName(proc);\n            try {\n              memo[fieldName] = makeProcField(fieldName, proc, build, {\n                fieldWithHooks,\n                forceList,\n              });\n            } catch (e) {\n              // eslint-disable-next-line no-console\n              console.warn(\n                chalk.bold.yellow(\n                  `Failed to add function '${proc.namespace.name}.${\n                    proc.name\n                  }'; run with 'DEBUG=\"graphile-build-pg:warn\"' to view the error`\n                )\n              );\n              debugWarn(e);\n            }\n          }\n          if (!proc.returnsSet || hasConnections) {\n            makeField(false);\n          }\n          if (proc.returnsSet && hasSimpleCollections) {\n            makeField(true);\n          }\n          return memo;\n        }, {}),\n      `Adding query procedures to root Query type`\n    );\n  });\n}: Plugin);\n"]}
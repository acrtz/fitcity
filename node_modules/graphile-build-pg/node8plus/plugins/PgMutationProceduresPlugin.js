"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _makeProcField = require("./makeProcField");

var _makeProcField2 = _interopRequireDefault(_makeProcField);

var _omit = require("../omit");

var _omit2 = _interopRequireDefault(_omit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function PgMutationProceduresPlugin(builder) {
  builder.hook("GraphQLObjectType:fields", (fields, build, context) => {
    const {
      extend,
      pgIntrospectionResultsByKind: introspectionResultsByKind,
      inflection
    } = build;
    const { scope: { isRootMutation }, fieldWithHooks } = context;
    if (!isRootMutation) {
      return fields;
    }
    return extend(fields, introspectionResultsByKind.procedure.filter(proc => !proc.isStable).filter(proc => !!proc.namespace).filter(proc => !(0, _omit2.default)(proc, "execute")).reduce((memo, proc) => {
      /*
        proc =
          { kind: 'procedure',
            name: 'integration_webhook_secret',
            description: null,
            namespaceId: '6484381',
            isStrict: false,
            returnsSet: false,
            isStable: true,
            returnTypeId: '2950',
            argTypeIds: [ '6484569' ],
            argNames: [ 'integration' ],
            argDefaultsNum: 0 }
        */

      const fieldName = inflection.functionMutationName(proc);
      memo[fieldName] = (0, _makeProcField2.default)(fieldName, proc, build, {
        fieldWithHooks,
        isMutation: true
      });
      return memo;
    }, {}), `Adding mutation procedure to root Mutation field`);
  });
};
//# sourceMappingURL=PgMutationProceduresPlugin.js.map
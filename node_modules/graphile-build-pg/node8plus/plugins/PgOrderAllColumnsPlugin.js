"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit = require("../omit");

var _omit2 = _interopRequireDefault(_omit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function PgOrderAllColumnsPlugin(builder) {
  builder.hook("GraphQLEnumType:values", (values, build, context) => {
    const {
      extend,
      pgIntrospectionResultsByKind: introspectionResultsByKind,
      pgColumnFilter,
      inflection
    } = build;
    const { scope: { isPgRowSortEnum, pgIntrospection: table } } = context;
    if (!isPgRowSortEnum || !table || table.kind !== "class") {
      return values;
    }
    return extend(values, introspectionResultsByKind.attribute.filter(attr => attr.classId === table.id).filter(attr => pgColumnFilter(attr, build, context)).reduce((memo, attr) => {
      if ((0, _omit2.default)(attr, "order")) {
        return memo;
      }
      const ascFieldName = inflection.orderByColumnEnum(attr, true);
      const descFieldName = inflection.orderByColumnEnum(attr, false);
      memo[ascFieldName] = {
        value: {
          alias: ascFieldName.toLowerCase(),
          specs: [[attr.name, true]]
        }
      };
      memo[descFieldName] = {
        value: {
          alias: descFieldName.toLowerCase(),
          specs: [[attr.name, false]]
        }
      };
      return memo;
    }, {}), `Adding order values from table '${table.name}'`);
  });
};
//# sourceMappingURL=PgOrderAllColumnsPlugin.js.map
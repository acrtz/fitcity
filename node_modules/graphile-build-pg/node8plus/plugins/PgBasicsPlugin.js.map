{"version":3,"sources":["../../src/plugins/PgBasicsPlugin.js"],"names":["preventEmptyResult","defaultPgColumnFilter","_attr","_build","_context","obj","Object","keys","reduce","memo","key","fn","args","result","apply","length","stringifiedArgs","require","inspect","Error","String","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","hook","build","extend","graphileBuildPgVersion","pgSql","inflection","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","tags","name","_typeName","type","_tableName","table","_singularizedTableName","singularize","replace","_columnName","attr","_options","enumType","argument","index","orderByColumnEnum","ascending","columnName","skipRowId","constantCase","domainType","enumName","inValue","value","_","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","tableType","column","computedColumn","pseudoColumnName","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","map","join","manyRelationByKeys","foreignFieldName","manyRelationByKeysSimple","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","updateNodeInputType","deleteNodeInputType","edgeField","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType"],"mappings":"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","file":"PgBasicsPlugin.js","sourcesContent":["// @flow\nimport sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n} from \"./PgIntrospectionPlugin\";\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function(...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  { pgStrictFunctions = false, pgColumnFilter = defaultPgColumnFilter }\n) {\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      graphileBuildPgVersion: version,\n      pgSql: sql,\n      pgStrictFunctions,\n      pgColumnFilter,\n    });\n  });\n\n  builder.hook(\"inflection\", (inflection, build) => {\n    return build.extend(\n      inflection,\n      preventEmptyResult({\n        // These helpers are passed GraphQL type names as strings\n        conditionType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-condition`);\n        },\n        inputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-input`);\n        },\n        rangeBoundType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range-bound`);\n        },\n        rangeType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range`);\n        },\n        patchType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-patch`);\n        },\n        patchField(itemName: string) {\n          return this.camelCase(`${itemName}-patch`);\n        },\n        orderByType(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n        },\n        edge(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n        },\n        connection(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-connection`);\n        },\n\n        // These helpers handle overrides via smart comments. They should only\n        // be used in other inflectors, hence the underscore prefix.\n        //\n        // IMPORTANT: do NOT do case transforms here, because detail can be\n        // lost, e.g.\n        // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n        _functionName(proc: PgProc) {\n          return proc.tags.name || proc.name;\n        },\n        _typeName(type: PgType) {\n          // 'type' introspection result\n          return type.tags.name || type.name;\n        },\n        _tableName(table: PgClass) {\n          return table.tags.name || table.type.tags.name || table.name;\n        },\n        _singularizedTableName(table: PgClass): string {\n          return this.singularize(this._tableName(table)).replace(\n            /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n            \"$&_record\"\n          );\n        },\n        _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n          return attr.tags.name || attr.name;\n        },\n\n        // From here down, functions are passed database introspection results\n        enumType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        argument(name: ?string, index: number) {\n          return this.camelCase(name || `arg${index}`);\n        },\n        orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n          const columnName = this._columnName(attr, {\n            skipRowId: true, // Because we messed up 😔\n          });\n          return this.constantCase(\n            `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n          );\n        },\n        domainType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        enumName(inValue: string) {\n          let value = inValue;\n\n          if (value === \"\") {\n            return \"_EMPTY_\";\n          }\n\n          // Some enums use asterisks to signify wildcards - this might be for\n          // the whole item, or prefixes/suffixes, or even in the middle.  This\n          // is provided on a best efforts basis, if it doesn't suit your\n          // purposes then please pass a custom inflector as mentioned below.\n          value = value\n            .replace(/\\*/g, \"_ASTERISK_\")\n            .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n            .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n          // This is a best efforts replacement for common symbols that you\n          // might find in enums. Generally we only support enums that are\n          // alphanumeric, if these replacements don't work for you, you should\n          // pass a custom inflector that replaces this `enumName` method\n          // with one of your own chosing.\n          value =\n            {\n              // SQL comparison operators\n              \">\": \"GREATER_THAN\",\n              \">=\": \"GREATER_THAN_OR_EQUAL\",\n              \"=\": \"EQUAL\",\n              \"!=\": \"NOT_EQUAL\",\n              \"<>\": \"DIFFERENT\",\n              \"<=\": \"LESS_THAN_OR_EQUAL\",\n              \"<\": \"LESS_THAN\",\n\n              // PostgreSQL LIKE shortcuts\n              \"~~\": \"LIKE\",\n              \"~~*\": \"ILIKE\",\n              \"!~~\": \"NOT_LIKE\",\n              \"!~~*\": \"NOT_ILIKE\",\n\n              // '~' doesn't necessarily represent regexps, but the three\n              // operators following it likely do, so we'll use the word TILDE\n              // in all for consistency.\n              \"~\": \"TILDE\",\n              \"~*\": \"TILDE_ASTERISK\",\n              \"!~\": \"NOT_TILDE\",\n              \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n              // A number of other symbols where we're not sure of their\n              // meaning.  We give them common generic names so that they're\n              // suitable for multiple purposes, e.g. favouring 'PLUS' over\n              // 'ADDITION' and 'DOT' over 'FULL_STOP'\n              \"%\": \"PERCENT\",\n              \"+\": \"PLUS\",\n              \"-\": \"MINUS\",\n              \"/\": \"SLASH\",\n              \"\\\\\": \"BACKSLASH\",\n              _: \"UNDERSCORE\",\n              \"#\": \"POUND\",\n              \"£\": \"STERLING\",\n              $: \"DOLLAR\",\n              \"&\": \"AMPERSAND\",\n              \"@\": \"AT\",\n              \"'\": \"APOSTROPHE\",\n              '\"': \"QUOTE\",\n              \"`\": \"BACKTICK\",\n              \":\": \"COLON\",\n              \";\": \"SEMICOLON\",\n              \"!\": \"EXCLAMATION_POINT\",\n              \"?\": \"QUESTION_MARK\",\n              \",\": \"COMMA\",\n              \".\": \"DOT\",\n              \"^\": \"CARET\",\n              \"|\": \"BAR\",\n              \"[\": \"OPEN_BRACKET\",\n              \"]\": \"CLOSE_BRACKET\",\n              \"(\": \"OPEN_PARENTHESIS\",\n              \")\": \"CLOSE_PARENTHESIS\",\n              \"{\": \"OPEN_BRACE\",\n              \"}\": \"CLOSE_BRACE\",\n            }[value] || value;\n          return value;\n        },\n\n        tableNode(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        tableFieldName(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        allRows(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}`\n          );\n        },\n        allRowsSimple(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}-list`\n          );\n        },\n        functionMutationName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryNameList(proc: PgProc) {\n          return this.camelCase(`${this._functionName(proc)}-list`);\n        },\n        functionPayloadType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n        },\n        functionInputType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-input`);\n        },\n        tableType(table: PgClass) {\n          return this.upperCamelCase(this._singularizedTableName(table));\n        },\n        column(attr: PgAttribute) {\n          return this.camelCase(this._columnName(attr));\n        },\n        computedColumn(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n        },\n        computedColumnList(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName\n            ? proc.tags.fieldName + \"List\"\n            : this.camelCase(`${pseudoColumnName}-list`);\n        },\n        singleRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeysSimple(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-list`\n          );\n        },\n        rowByUniqueKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return constraint.tags.updateFieldName;\n          }\n          return this.camelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        deleteByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return constraint.tags.deleteFieldName;\n          }\n          return this.camelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.updateFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        deleteByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.deleteFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        updateNode(table: PgClass) {\n          return this.camelCase(`update-${this._singularizedTableName(table)}`);\n        },\n        deleteNode(table: PgClass) {\n          return this.camelCase(`delete-${this._singularizedTableName(table)}`);\n        },\n        updateNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-input`\n          );\n        },\n        deleteNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-input`\n          );\n        },\n        edgeField(table: PgClass) {\n          return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n        },\n        scalarFunctionConnection(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-connection`);\n        },\n        scalarFunctionEdge(proc: PgProc) {\n          return this.upperCamelCase(\n            `${this.singularize(this._functionName(proc))}-edge`\n          );\n        },\n        createField(table: PgClass) {\n          return this.camelCase(`create-${this._singularizedTableName(table)}`);\n        },\n        createInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-input`\n          );\n        },\n        createPayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        updatePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        deletePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-payload`\n          );\n        },\n      })\n    );\n  });\n}: Plugin);\n"]}
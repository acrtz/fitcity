{"version":3,"sources":["../../src/plugins/PgConnectionArgOrderBy.js"],"names":["PgConnectionArgOrderBy","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","graphql","GraphQLEnumType","inflection","class","filter","table","isSelectable","namespace","forEach","tableTypeName","tableType","name","orderByType","description","values","NATURAL","value","alias","specs","pgIntrospection","isPgRowSortEnum","args","context","extend","getTypeByName","pgGetGqlTypeByTypeId","pgSql","sql","GraphQLList","GraphQLNonNull","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","addArgDataGenerator","Self","field","shouldAddOrderBy","kind","TableType","type","id","TableOrderByType","cursorPrefixFromOrderBy","orderBy","cursorPrefixes","item","push","literal","length","connectionOrderBy","rawOrderBy","Array","isArray","pgCursorPrefix","pgQuery","queryBuilder","unique","orders","col","ascending","expr","fragment","getTableAlias","identifier","setOrderIsUnique"],"mappings":";;;;;;AACA;;;;AAEA;;;;;;kBAEgB,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AACvDA,UAAQC,IAAR,CAAa,MAAb,EAAqB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjC,UAAM;AACJC,kBADI;AAEJC,oCAA8BC,0BAF1B;AAGJC,eAAS,EAAEC,eAAF,EAHL;AAIJC;AAJI,QAKFN,KALJ;AAMAG,+BAA2BI,KAA3B,CACGC,MADH,CACUC,SAASA,MAAMC,YAAN,IAAsB,CAAC,oBAAKD,KAAL,EAAY,OAAZ,CAD1C,EAEGD,MAFH,CAEUC,SAAS,CAAC,CAACA,MAAME,SAF3B,EAGGC,OAHH,CAGWH,SAAS;AAChB,YAAMI,gBAAgBP,WAAWQ,SAAX,CAAqBL,KAArB,CAAtB;AACA;AACAR,mBACEI,eADF,EAEE;AACEU,cAAMT,WAAWU,WAAX,CAAuBH,aAAvB,CADR;AAEEI,qBAAc,kCAAiCJ,aAAc,KAF/D;AAGEK,gBAAQ;AACNC,mBAAS;AACPC,mBAAO;AACLC,qBAAO,IADF;AAELC,qBAAO;AAFF;AADA;AADH;AAHV,OAFF,EAcE;AACEC,yBAAiBd,KADnB;AAEEe,yBAAiB;AAFnB,OAdF;AAmBD,KAzBH;AA0BA,WAAOzB,CAAP;AACD,GAlCD;AAmCAF,UAAQC,IAAR,CACE,qCADF,EAEE,CAAC2B,IAAD,EAAOzB,KAAP,EAAc0B,OAAd,KAA0B;AACxB,UAAM;AACJC,YADI;AAEJC,mBAFI;AAGJC,0BAHI;AAIJC,aAAOC,GAJH;AAKJ3B,eAAS,EAAE4B,WAAF,EAAeC,cAAf,EALL;AAMJ3B;AANI,QAOFN,KAPJ;AAQA,UAAM;AACJkC,aAAO;AACLC,2BADK;AAELC,iCAFK;AAGLC,8BAAsB5B;AAHjB,OADH;AAMJ6B,yBANI;AAOJC,UAPI;AAQJC;AARI,QASFd,OATJ;AAUA,UAAMe,mBAAmBN,uBAAuBC,yBAAhD;AACA,QACE,CAACK,gBAAD,IACA,CAAChC,KADD,IAEAA,MAAMiC,IAAN,KAAe,OAFf,IAGA,CAACjC,MAAME,SAHP,IAIA,CAACF,MAAMC,YAJP,IAKA,oBAAKD,KAAL,EAAY,OAAZ,CANF,EAOE;AACA,aAAOgB,IAAP;AACD;AACD,UAAMkB,YAAYd,qBAAqBpB,MAAMmC,IAAN,CAAWC,EAAhC,CAAlB;AACA,UAAMhC,gBAAgB8B,UAAU5B,IAAhC;AACA,UAAM+B,mBAAmBlB,cACvBtB,WAAWU,WAAX,CAAuBH,aAAvB,CADuB,CAAzB;AAGA,UAAMkC,0BAA0BC,WAAW;AACzC,UAAIA,OAAJ,EAAa;AACX,YAAIC,iBAAiB,EAArB;AACA,aAAK,MAAMC,IAAX,IAAmBF,OAAnB,EAA4B;AAC1B,cAAIE,KAAK7B,KAAT,EAAgB;AACd4B,2BAAeE,IAAf,CAAoBpB,IAAIqB,OAAJ,CAAYF,KAAK7B,KAAjB,CAApB;AACD;AACF;AACD,YAAI4B,eAAeI,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,iBAAOJ,cAAP;AACD;AACF;AACD,aAAO,IAAP;AACD,KAbD;;AAeAX,wBAAoB,SAASgB,iBAAT,CAA2B,EAAEN,SAASO,UAAX,EAA3B,EAAoD;AACtE,YAAMP,UAAUO,aACZC,MAAMC,OAAN,CAAcF,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAD7B,GAEZ,IAFJ;AAGA,aAAO;AACLG,wBAAgBX,wBAAwBC,OAAxB,CADX;AAELW,iBAASC,gBAAgB;AACvB,cAAIZ,WAAW,IAAf,EAAqB;AACnBA,oBAAQpC,OAAR,CAAgBsC,QAAQ;AACtB,oBAAM,EAAE5B,KAAF,EAASuC,MAAT,KAAoBX,IAA1B;AACA,oBAAMY,SACJN,MAAMC,OAAN,CAAcnC,MAAM,CAAN,CAAd,KAA2BA,MAAM+B,MAAN,KAAiB,CAA5C,GACI/B,KADJ,GAEI,CAACA,KAAD,CAHN;AAIAwC,qBAAOlD,OAAP,CAAe,CAAC,CAACmD,GAAD,EAAMC,SAAN,CAAD,KAAsB;AACnC,sBAAMC,OAAO,wBAASF,GAAT,IACThC,IAAImC,QAAS,GAAEN,aAAaO,aAAb,EAA6B,IAAGpC,IAAIqC,UAAJ,CAC7CL,GAD6C,CAE7C,EAHO,GAITA,GAJJ;AAKAH,6BAAaZ,OAAb,CAAqBiB,IAArB,EAA2BD,SAA3B;AACD,eAPD;AAQA,kBAAIH,MAAJ,EAAY;AACVD,6BAAaS,gBAAb;AACD;AACF,aAjBD;AAkBD;AACF;AAvBI,OAAP;AAyBD,KA7BD;;AA+BA,WAAO1C,OACLF,IADK,EAEL;AACEuB,eAAS;AACP/B,qBAAc,qCAAoCJ,aAAc,KADzD;AAEP+B,cAAM,IAAIZ,WAAJ,CAAgB,IAAIC,cAAJ,CAAmBa,gBAAnB,CAAhB;AAFC;AADX,KAFK,EAQJ,8BAA6BN,MAAMzB,IAAK,SAAQwB,KAAKxB,IAAK,GARtD,CAAP;AAUD,GA7FH;AA+FD,C","file":"PgConnectionArgOrderBy.js","sourcesContent":["// @flow\nimport isString from \"lodash/isString\";\nimport type { Plugin } from \"graphile-build\";\nimport omit from \"../omit\";\n\nexport default (function PgConnectionArgOrderBy(builder) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      graphql: { GraphQLEnumType },\n      inflection,\n    } = build;\n    introspectionResultsByKind.class\n      .filter(table => table.isSelectable && !omit(table, \"order\"))\n      .filter(table => !!table.namespace)\n      .forEach(table => {\n        const tableTypeName = inflection.tableType(table);\n        /* const TableOrderByType = */\n        newWithHooks(\n          GraphQLEnumType,\n          {\n            name: inflection.orderByType(tableTypeName),\n            description: `Methods to use when ordering \\`${tableTypeName}\\`.`,\n            values: {\n              NATURAL: {\n                value: {\n                  alias: null,\n                  specs: [],\n                },\n              },\n            },\n          },\n          {\n            pgIntrospection: table,\n            isPgRowSortEnum: true,\n          }\n        );\n      });\n    return _;\n  });\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n        inflection,\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: table,\n        },\n        addArgDataGenerator,\n        Self,\n        field,\n      } = context;\n      const shouldAddOrderBy = isPgFieldConnection || isPgFieldSimpleCollection;\n      if (\n        !shouldAddOrderBy ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable ||\n        omit(table, \"order\")\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeId(table.type.id);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n      const cursorPrefixFromOrderBy = orderBy => {\n        if (orderBy) {\n          let cursorPrefixes = [];\n          for (const item of orderBy) {\n            if (item.alias) {\n              cursorPrefixes.push(sql.literal(item.alias));\n            }\n          }\n          if (cursorPrefixes.length > 0) {\n            return cursorPrefixes;\n          }\n        }\n        return null;\n      };\n\n      addArgDataGenerator(function connectionOrderBy({ orderBy: rawOrderBy }) {\n        const orderBy = rawOrderBy\n          ? Array.isArray(rawOrderBy) ? rawOrderBy : [rawOrderBy]\n          : null;\n        return {\n          pgCursorPrefix: cursorPrefixFromOrderBy(orderBy),\n          pgQuery: queryBuilder => {\n            if (orderBy != null) {\n              orderBy.forEach(item => {\n                const { specs, unique } = item;\n                const orders =\n                  Array.isArray(specs[0]) || specs.length === 0\n                    ? specs\n                    : [specs];\n                orders.forEach(([col, ascending]) => {\n                  const expr = isString(col)\n                    ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                        col\n                      )}`\n                    : col;\n                  queryBuilder.orderBy(expr, ascending);\n                });\n                if (unique) {\n                  queryBuilder.setOrderIsUnique();\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          orderBy: {\n            description: `The method to use when ordering \\`${tableTypeName}\\`.`,\n            type: new GraphQLList(new GraphQLNonNull(TableOrderByType)),\n          },\n        },\n        `Adding 'orderBy' to field '${field.name}' of '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}
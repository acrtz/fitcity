{"version":3,"sources":["../../src/plugins/PgRowNode.js"],"names":["base64Decode","str","Buffer","String","toString","debugSql","PgRowByUniqueConstraint","builder","hook","object","build","context","addNodeFetcherForTypeName","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","gql2pg","scope","isPgRowType","pgIntrospection","table","namespace","sqlFullTableName","identifier","name","attributes","attribute","filter","attr","classId","id","primaryKeyConstraint","constraint","con","type","primaryKeys","keyAttributeNums","map","num","data","identifiers","pgClient","parsedResolveInfoFragment","ReturnType","resolveData","length","Error","query","undefined","forEach","key","idx","where","fragment","getTableAlias","text","values","compile","enabled","rows","row","fields","nodeIdFieldName","extend","parseResolveInfo","pgGetGqlTypeByTypeId","getNodeType","graphql","GraphQLNonNull","GraphQLID","inflection","isRootQuery","fieldWithHooks","class","reduce","memo","TableType","fieldName","tableNode","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","resolveInfo","nodeId","alias","JSON","parse","NodeTypeByAlias","e","isPgNodeQuery","pgFieldIntrospection"],"mappings":"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","file":"PgRowNode.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport omit from \"../omit\";\n\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgRowByUniqueConstraint(builder) {\n  builder.hook(\"GraphQLObjectType\", (object, build, context) => {\n    const {\n      addNodeFetcherForTypeName,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      gql2pg,\n    } = build;\n    const { scope: { isPgRowType, pgIntrospection: table } } = context;\n    if (!isPgRowType || !table.namespace || omit(table, \"read\")) {\n      return object;\n    }\n    const sqlFullTableName = sql.identifier(table.namespace.name, table.name);\n    const attributes = introspectionResultsByKind.attribute.filter(\n      attr => attr.classId === table.id\n    );\n    const primaryKeyConstraint = introspectionResultsByKind.constraint\n      .filter(con => con.classId === table.id)\n      .filter(con => con.type === \"p\")[0];\n    if (!primaryKeyConstraint) {\n      return object;\n    }\n    const primaryKeys =\n      primaryKeyConstraint &&\n      primaryKeyConstraint.keyAttributeNums.map(\n        num => attributes.filter(attr => attr.num === num)[0]\n      );\n    addNodeFetcherForTypeName(\n      object.name,\n      async (\n        data,\n        identifiers,\n        { pgClient },\n        parsedResolveInfoFragment,\n        ReturnType,\n        resolveData\n      ) => {\n        if (identifiers.length !== primaryKeys.length) {\n          throw new Error(\"Invalid ID\");\n        }\n        const query = queryFromResolveData(\n          sqlFullTableName,\n          undefined,\n          resolveData,\n          {},\n          builder => {\n            primaryKeys.forEach((key, idx) => {\n              builder.where(\n                sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                  key.name\n                )} = ${gql2pg(identifiers[idx], primaryKeys[idx].type)}`\n              );\n            });\n          }\n        );\n        const { text, values } = sql.compile(query);\n        if (debugSql.enabled) debugSql(text);\n        const { rows: [row] } = await pgClient.query(text, values);\n        return row;\n      }\n    );\n    return object;\n  });\n\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      nodeIdFieldName,\n      extend,\n      parseResolveInfo,\n      pgGetGqlTypeByTypeId,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      gql2pg,\n      getNodeType,\n      graphql: { GraphQLNonNull, GraphQLID },\n      inflection,\n    } = build;\n    const { scope: { isRootQuery }, fieldWithHooks } = context;\n    if (!isRootQuery || !nodeIdFieldName) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.class\n        .filter(table => !!table.namespace)\n        .filter(table => !omit(table, \"read\"))\n        .reduce((memo, table) => {\n          const TableType = pgGetGqlTypeByTypeId(table.type.id);\n          const sqlFullTableName = sql.identifier(\n            table.namespace.name,\n            table.name\n          );\n          if (TableType) {\n            const attributes = introspectionResultsByKind.attribute.filter(\n              attr => attr.classId === table.id\n            );\n            const primaryKeyConstraint = introspectionResultsByKind.constraint\n              .filter(con => con.classId === table.id)\n              .filter(con => con.type === \"p\")[0];\n            if (!primaryKeyConstraint) {\n              return memo;\n            }\n            const primaryKeys =\n              primaryKeyConstraint &&\n              primaryKeyConstraint.keyAttributeNums.map(\n                num => attributes.filter(attr => attr.num === num)[0]\n              );\n            const fieldName = inflection.tableNode(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: `Reads a single \\`${\n                    TableType.name\n                  }\\` using its globally unique \\`ID\\`.`,\n                  type: TableType,\n                  args: {\n                    [nodeIdFieldName]: {\n                      description: `The globally unique \\`ID\\` to be used in selecting a single \\`${\n                        TableType.name\n                      }\\`.`,\n                      type: new GraphQLNonNull(GraphQLID),\n                    },\n                  },\n                  async resolve(parent, args, { pgClient }, resolveInfo) {\n                    const nodeId = args[nodeIdFieldName];\n                    try {\n                      const [alias, ...identifiers] = JSON.parse(\n                        base64Decode(nodeId)\n                      );\n                      const NodeTypeByAlias = getNodeType(alias);\n                      if (NodeTypeByAlias !== TableType) {\n                        throw new Error(\"Mismatched type\");\n                      }\n                      if (identifiers.length !== primaryKeys.length) {\n                        throw new Error(\"Invalid ID\");\n                      }\n\n                      const parsedResolveInfoFragment = parseResolveInfo(\n                        resolveInfo\n                      );\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        TableType\n                      );\n                      const query = queryFromResolveData(\n                        sqlFullTableName,\n                        undefined,\n                        resolveData,\n                        {},\n                        builder => {\n                          primaryKeys.forEach((key, idx) => {\n                            builder.where(\n                              sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                key.name\n                              )} = ${gql2pg(\n                                identifiers[idx],\n                                primaryKeys[idx].type\n                              )}`\n                            );\n                          });\n                        }\n                      );\n                      const { text, values } = sql.compile(query);\n                      if (debugSql.enabled) debugSql(text);\n                      const { rows: [row] } = await pgClient.query(\n                        text,\n                        values\n                      );\n                      return row;\n                    } catch (e) {\n                      return null;\n                    }\n                  },\n                };\n              },\n              {\n                isPgNodeQuery: true,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          return memo;\n        }, {}),\n      `Adding \"row by node ID\" fields to root Query type`\n    );\n  });\n}: Plugin);\n"]}
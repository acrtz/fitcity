{"version":3,"sources":["../../src/plugins/PgMutationUpdateDeletePlugin.js"],"names":["debug","base64Decode","str","Buffer","String","toString","PgMutationUpdateDeletePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","newWithHooks","getNodeIdForTypeAndIdentifiers","nodeIdFieldName","fieldDataGeneratorsByType","extend","parseResolveInfo","getTypeByName","gql2pg","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","getNodeType","graphql","GraphQLNonNull","GraphQLInputObjectType","GraphQLString","GraphQLObjectType","GraphQLID","pgColumnFilter","inflection","scope","isRootMutation","fieldWithHooks","pluralize","singularize","camelCase","reduce","outerMemo","mode","class","filter","table","namespace","isUpdatable","isDeletable","memo","TableType","type","id","commonCodeRenameMe","pgClient","resolveInfo","getDataFromParsedResolveInfoFragment","PayloadType","input","condition","parsedResolveInfoFragment","resolveData","sqlTypeIdentifier","identifier","name","sqlMutationQuery","sqlColumns","sqlValues","inputData","patchField","tableFieldName","attribute","attr","classId","forEach","fieldName","column","val","push","length","query","join","map","col","i","fragment","modifiedRowAlias","Symbol","row","rows","e","Error","clientMutationId","data","uniqueConstraints","constraint","con","attributes","sort","a","b","num","Table","tableTypeName","TablePatch","patchType","description","recurseDataGeneratorsForField","tableName","deletedNodeIdFieldName","Object","assign","resolve","addDataGenerator","fieldDataGeneratorsByTableType","get","gens","gen","__identifiers","isPgMutationPayloadDeletedNodeIdField","isMutationPayload","isPgUpdatePayloadType","isPgDeletePayloadType","pgIntrospection","primaryKeyConstraint","primaryKeys","keyAttributeNums","InputType","isPgUpdateInputType","isPgUpdateNodeInputType","isPgDeleteInputType","isPgDeleteNodeInputType","pgInflection","isMutationInput","args","parent","nodeId","alias","identifiers","JSON","parse","NodeTypeByAlias","key","idx","isPgNodeMutation","pgFieldIntrospection","keys","every","_","some","typeId","isPgUpdateByKeysInputType","isPgDeleteByKeysInputType","pgKeys"],"mappings":"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","file":"PgMutationUpdateDeletePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport omit from \"../omit\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\n\nexport default (async function PgMutationUpdateDeletePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      newWithHooks,\n      getNodeIdForTypeAndIdentifiers,\n      nodeIdFieldName,\n      fieldDataGeneratorsByType,\n      extend,\n      parseResolveInfo,\n      getTypeByName,\n      gql2pg,\n      pgGetGqlTypeByTypeId,\n      pgGetGqlInputTypeByTypeId,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      getNodeType,\n      graphql: {\n        GraphQLNonNull,\n        GraphQLInputObjectType,\n        GraphQLString,\n        GraphQLObjectType,\n        GraphQLID,\n      },\n      pgColumnFilter,\n      inflection,\n    } = build;\n    const { scope: { isRootMutation }, fieldWithHooks } = context;\n    const { pluralize, singularize, camelCase } = inflection;\n    if (!isRootMutation) {\n      return fields;\n    }\n    return extend(\n      fields,\n      [\"update\", \"delete\"].reduce(\n        (outerMemo, mode) =>\n          introspectionResultsByKind.class\n            .filter(table => !!table.namespace)\n            .filter(\n              table =>\n                (mode === \"update\" &&\n                  table.isUpdatable &&\n                  !omit(table, \"update\")) ||\n                (mode === \"delete\" &&\n                  table.isDeletable &&\n                  !omit(table, \"delete\"))\n            )\n            .reduce((memo, table) => {\n              const TableType = pgGetGqlTypeByTypeId(table.type.id);\n              async function commonCodeRenameMe(\n                pgClient,\n                resolveInfo,\n                getDataFromParsedResolveInfoFragment,\n                PayloadType,\n                input,\n                condition,\n                context\n              ) {\n                const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n                const resolveData = getDataFromParsedResolveInfoFragment(\n                  parsedResolveInfoFragment,\n                  PayloadType\n                );\n\n                const sqlTypeIdentifier = sql.identifier(\n                  table.namespace.name,\n                  table.name\n                );\n\n                let sqlMutationQuery;\n                if (mode === \"update\") {\n                  const sqlColumns = [];\n                  const sqlValues = [];\n                  const inputData =\n                    input[\n                      inflection.patchField(inflection.tableFieldName(table))\n                    ];\n                  introspectionResultsByKind.attribute\n                    .filter(attr => attr.classId === table.id)\n                    .filter(attr => pgColumnFilter(attr, build, context))\n                    .forEach(attr => {\n                      const fieldName = inflection.column(attr);\n                      if (\n                        fieldName in inputData /* Because we care about null! */\n                      ) {\n                        const val = inputData[fieldName];\n                        sqlColumns.push(sql.identifier(attr.name));\n                        sqlValues.push(gql2pg(val, attr.type));\n                      }\n                    });\n                  if (sqlColumns.length === 0) {\n                    return null;\n                  }\n                  sqlMutationQuery = sql.query`\n                      update ${sql.identifier(\n                        table.namespace.name,\n                        table.name\n                      )} set ${sql.join(\n                    sqlColumns.map(\n                      (col, i) => sql.fragment`${col} = ${sqlValues[i]}`\n                    ),\n                    \", \"\n                  )}\n                      where ${condition}\n                      returning *`;\n                } else {\n                  sqlMutationQuery = sql.query`\n                      delete from ${sql.identifier(\n                        table.namespace.name,\n                        table.name\n                      )}\n                      where ${condition}\n                      returning *`;\n                }\n\n                const modifiedRowAlias = sql.identifier(Symbol());\n                const query = queryFromResolveData(\n                  modifiedRowAlias,\n                  modifiedRowAlias,\n                  resolveData,\n                  {}\n                );\n                let row;\n                try {\n                  await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                  const rows = await viaTemporaryTable(\n                    pgClient,\n                    sqlTypeIdentifier,\n                    sqlMutationQuery,\n                    modifiedRowAlias,\n                    query\n                  );\n                  row = rows[0];\n                  await pgClient.query(\"RELEASE SAVEPOINT graphql_mutation\");\n                } catch (e) {\n                  await pgClient.query(\n                    \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                  );\n                  throw e;\n                }\n                if (!row) {\n                  throw new Error(\n                    `No values were ${mode}d in collection '${pluralize(\n                      table.name\n                    )}' because no values were found.`\n                  );\n                }\n                return {\n                  clientMutationId: input.clientMutationId,\n                  data: row,\n                };\n              }\n              if (TableType) {\n                const uniqueConstraints = introspectionResultsByKind.constraint\n                  .filter(con => con.classId === table.id)\n                  .filter(con => con.type === \"u\" || con.type === \"p\");\n                const attributes = introspectionResultsByKind.attribute\n                  .filter(attr => attr.classId === table.id)\n                  .sort((a, b) => a.num - b.num);\n                const Table = pgGetGqlTypeByTypeId(table.type.id);\n                const tableTypeName = Table.name;\n                const TablePatch = getTypeByName(\n                  inflection.patchType(Table.name)\n                );\n                const PayloadType = newWithHooks(\n                  GraphQLObjectType,\n                  {\n                    name: inflection[\n                      mode === \"delete\"\n                        ? \"deletePayloadType\"\n                        : \"updatePayloadType\"\n                    ](table),\n                    description: `The output of our ${mode} \\`${tableTypeName}\\` mutation.`,\n                    fields: ({\n                      recurseDataGeneratorsForField,\n                      fieldWithHooks,\n                    }) => {\n                      const tableName = inflection.tableFieldName(table);\n                      recurseDataGeneratorsForField(tableName);\n                      // This should really be `-node-id` but for compatibility with PostGraphQL v3 we haven't made that change.\n                      const deletedNodeIdFieldName = camelCase(\n                        `deleted-${singularize(table.name)}-id`\n                      );\n                      return Object.assign(\n                        {\n                          clientMutationId: {\n                            description:\n                              \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                            type: GraphQLString,\n                          },\n                          [tableName]: {\n                            description: `The \\`${tableTypeName}\\` that was ${mode}d by this mutation.`,\n                            type: Table,\n                            resolve(data) {\n                              return data.data;\n                            },\n                          },\n                        },\n                        mode === \"delete\"\n                          ? {\n                              [deletedNodeIdFieldName]: fieldWithHooks(\n                                deletedNodeIdFieldName,\n                                ({ addDataGenerator }) => {\n                                  const fieldDataGeneratorsByTableType = fieldDataGeneratorsByType.get(\n                                    TableType\n                                  );\n\n                                  const gens =\n                                    fieldDataGeneratorsByTableType &&\n                                    fieldDataGeneratorsByTableType[\n                                      nodeIdFieldName\n                                    ];\n                                  if (gens) {\n                                    gens.forEach(gen => addDataGenerator(gen));\n                                  }\n                                  return {\n                                    type: GraphQLID,\n                                    resolve(data) {\n                                      return (\n                                        data.data.__identifiers &&\n                                        getNodeIdForTypeAndIdentifiers(\n                                          Table,\n                                          ...data.data.__identifiers\n                                        )\n                                      );\n                                    },\n                                  };\n                                },\n                                {\n                                  isPgMutationPayloadDeletedNodeIdField: true,\n                                }\n                              ),\n                            }\n                          : null\n                      );\n                    },\n                  },\n                  {\n                    isMutationPayload: true,\n                    isPgUpdatePayloadType: mode === \"update\",\n                    isPgDeletePayloadType: mode === \"delete\",\n                    pgIntrospection: table,\n                  }\n                );\n\n                // NodeId\n                if (nodeIdFieldName) {\n                  const primaryKeyConstraint = introspectionResultsByKind.constraint\n                    .filter(con => con.classId === table.id)\n                    .filter(con => con.type === \"p\")[0];\n                  if (!primaryKeyConstraint) {\n                    return memo;\n                  }\n                  const primaryKeys =\n                    primaryKeyConstraint &&\n                    primaryKeyConstraint.keyAttributeNums.map(\n                      num => attributes.filter(attr => attr.num === num)[0]\n                    );\n                  const fieldName = inflection[\n                    mode === \"update\" ? \"updateNode\" : \"deleteNode\"\n                  ](table);\n                  const InputType = newWithHooks(\n                    GraphQLInputObjectType,\n                    {\n                      description: `All input for the \\`${fieldName}\\` mutation.`,\n                      name: inflection[\n                        mode === \"update\"\n                          ? \"updateNodeInputType\"\n                          : \"deleteNodeInputType\"\n                      ](table),\n                      fields: Object.assign(\n                        {\n                          clientMutationId: {\n                            description:\n                              \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                            type: GraphQLString,\n                          },\n                          [nodeIdFieldName]: {\n                            description: `The globally unique \\`ID\\` which will identify a single \\`${tableTypeName}\\` to be ${mode}d.`,\n                            type: new GraphQLNonNull(GraphQLID),\n                          },\n                        },\n                        mode === \"update\"\n                          ? {\n                              [inflection.patchField(\n                                inflection.tableFieldName(table)\n                              )]: {\n                                description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                                type: new GraphQLNonNull(TablePatch),\n                              },\n                            }\n                          : null\n                      ),\n                    },\n                    {\n                      isPgUpdateInputType: mode === \"update\",\n                      isPgUpdateNodeInputType: mode === \"update\",\n                      isPgDeleteInputType: mode === \"delete\",\n                      isPgDeleteNodeInputType: mode === \"delete\",\n                      pgInflection: table,\n                      isMutationInput: true,\n                    }\n                  );\n\n                  memo[fieldName] = fieldWithHooks(\n                    fieldName,\n                    context => {\n                      const { getDataFromParsedResolveInfoFragment } = context;\n                      return {\n                        description:\n                          mode === \"update\"\n                            ? `Updates a single \\`${tableTypeName}\\` using its globally unique id and a patch.`\n                            : `Deletes a single \\`${tableTypeName}\\` using its globally unique id.`,\n                        type: PayloadType,\n                        args: {\n                          input: {\n                            type: new GraphQLNonNull(InputType),\n                          },\n                        },\n                        async resolve(\n                          parent,\n                          { input },\n                          { pgClient },\n                          resolveInfo\n                        ) {\n                          const nodeId = input[nodeIdFieldName];\n                          try {\n                            const [alias, ...identifiers] = JSON.parse(\n                              base64Decode(nodeId)\n                            );\n                            const NodeTypeByAlias = getNodeType(alias);\n                            if (NodeTypeByAlias !== TableType) {\n                              throw new Error(\"Mismatched type\");\n                            }\n                            if (identifiers.length !== primaryKeys.length) {\n                              throw new Error(\"Invalid ID\");\n                            }\n\n                            return commonCodeRenameMe(\n                              pgClient,\n                              resolveInfo,\n                              getDataFromParsedResolveInfoFragment,\n                              PayloadType,\n                              input,\n                              sql.fragment`(${sql.join(\n                                primaryKeys.map(\n                                  (key, idx) =>\n                                    sql.fragment`${sql.identifier(\n                                      key.name\n                                    )} = ${gql2pg(identifiers[idx], key.type)}`\n                                ),\n                                \") and (\"\n                              )})`,\n                              context\n                            );\n                          } catch (e) {\n                            debug(e);\n                            return null;\n                          }\n                        },\n                      };\n                    },\n                    {\n                      isPgNodeMutation: true,\n                      pgFieldIntrospection: table,\n                      [mode === \"update\"\n                        ? \"isPgUpdateMutationField\"\n                        : \"isPgDeleteMutationField\"]: true,\n                    }\n                  );\n                }\n\n                // Unique\n                uniqueConstraints.forEach(constraint => {\n                  if (omit(constraint, mode)) {\n                    return;\n                  }\n                  const keys = constraint.keyAttributeNums.map(\n                    num => attributes.filter(attr => attr.num === num)[0]\n                  );\n                  if (!keys.every(_ => _)) {\n                    throw new Error(\n                      \"Consistency error: could not find an attribute!\"\n                    );\n                  }\n                  if (keys.some(key => omit(key, \"read\"))) {\n                    return;\n                  }\n                  const fieldName = inflection[\n                    mode === \"update\" ? \"updateByKeys\" : \"deleteByKeys\"\n                  ](keys, table, constraint);\n                  const InputType = newWithHooks(\n                    GraphQLInputObjectType,\n                    {\n                      description: `All input for the \\`${fieldName}\\` mutation.`,\n                      name: inflection[\n                        mode === \"update\"\n                          ? \"updateByKeysInputType\"\n                          : \"deleteByKeysInputType\"\n                      ](keys, table, constraint),\n                      fields: Object.assign(\n                        {\n                          clientMutationId: {\n                            type: GraphQLString,\n                          },\n                        },\n                        mode === \"update\"\n                          ? {\n                              [inflection.patchField(\n                                inflection.tableFieldName(table)\n                              )]: {\n                                description: `An object where the defined keys will be set on the \\`${tableTypeName}\\` being ${mode}d.`,\n                                type: new GraphQLNonNull(TablePatch),\n                              },\n                            }\n                          : null,\n                        keys.reduce((memo, key) => {\n                          memo[inflection.column(key)] = {\n                            description: key.description,\n                            type: new GraphQLNonNull(\n                              pgGetGqlInputTypeByTypeId(key.typeId)\n                            ),\n                          };\n                          return memo;\n                        }, {})\n                      ),\n                    },\n                    {\n                      isPgUpdateInputType: mode === \"update\",\n                      isPgUpdateByKeysInputType: mode === \"update\",\n                      isPgDeleteInputType: mode === \"delete\",\n                      isPgDeleteByKeysInputType: mode === \"delete\",\n                      pgInflection: table,\n                      pgKeys: keys,\n                      isMutationInput: true,\n                    }\n                  );\n\n                  memo[fieldName] = fieldWithHooks(\n                    fieldName,\n                    context => {\n                      const { getDataFromParsedResolveInfoFragment } = context;\n                      return {\n                        description:\n                          mode === \"update\"\n                            ? `Updates a single \\`${tableTypeName}\\` using a unique key and a patch.`\n                            : `Deletes a single \\`${tableTypeName}\\` using a unique key.`,\n                        type: PayloadType,\n                        args: {\n                          input: {\n                            type: new GraphQLNonNull(InputType),\n                          },\n                        },\n                        async resolve(\n                          parent,\n                          { input },\n                          { pgClient },\n                          resolveInfo\n                        ) {\n                          return commonCodeRenameMe(\n                            pgClient,\n                            resolveInfo,\n                            getDataFromParsedResolveInfoFragment,\n                            PayloadType,\n                            input,\n                            sql.fragment`(${sql.join(\n                              keys.map(\n                                key =>\n                                  sql.fragment`${sql.identifier(\n                                    key.name\n                                  )} = ${gql2pg(\n                                    input[inflection.column(key)],\n                                    key.type\n                                  )}`\n                              ),\n                              \") and (\"\n                            )})`,\n                            context\n                          );\n                        },\n                      };\n                    },\n                    {\n                      isPgNodeMutation: false,\n                      pgFieldIntrospection: table,\n                      [mode === \"update\"\n                        ? \"isPgUpdateMutationField\"\n                        : \"isPgDeleteMutationField\"]: true,\n                    }\n                  );\n                });\n              }\n              return memo;\n            }, outerMemo),\n        {}\n      ),\n      `Adding default update/delete mutations to root Mutation type`\n    );\n  });\n}: Plugin);\n"]}
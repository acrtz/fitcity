{"version":3,"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"names":["debug","PgMutationCreatePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","inflection","scope","isRootMutation","fieldWithHooks","class","filter","table","namespace","isSelectable","isInsertable","reduce","memo","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","clientMutationId","tableFieldName","isPgCreateInputType","pgInflection","PayloadType","createPayloadType","recurseDataGeneratorsForField","tableName","resolve","data","isMutationPayload","isPgCreatePayloadType","pgIntrospection","fieldName","createField","getDataFromParsedResolveInfoFragment","args","input","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","Symbol","query","sqlColumns","sqlValues","inputData","attribute","attr","classId","forEach","column","val","Object","prototype","hasOwnProperty","call","push","mutationQuery","length","fragment","join","row","rows","e","pgFieldIntrospection","isPgCreateMutationField"],"mappings":"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","file":"PgMutationCreatePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport omit from \"../omit\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      newWithHooks,\n      parseResolveInfo,\n      pgIntrospectionResultsByKind,\n      pgGetGqlTypeByTypeId,\n      pgGetGqlInputTypeByTypeId,\n      pgSql: sql,\n      gql2pg,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLInputObjectType,\n        GraphQLNonNull,\n        GraphQLString,\n      },\n      pgColumnFilter,\n      inflection,\n    } = build;\n    const { scope: { isRootMutation }, fieldWithHooks } = context;\n    if (!isRootMutation) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      pgIntrospectionResultsByKind.class\n        .filter(table => !!table.namespace)\n        .filter(table => table.isSelectable)\n        .filter(table => table.isInsertable && !omit(table, \"create\"))\n        .reduce((memo, table) => {\n          const Table = pgGetGqlTypeByTypeId(table.type.id);\n          if (!Table) {\n            debug(\n              `There was no table type for table '${table.namespace.name}.${\n                table.name\n              }', so we're not generating a create mutation for it.`\n            );\n            return memo;\n          }\n          const TableInput = pgGetGqlInputTypeByTypeId(table.type.id);\n          if (!TableInput) {\n            debug(\n              `There was no input type for table '${table.namespace.name}.${\n                table.name\n              }', so we're not generating a create mutation for it.`\n            );\n            return memo;\n          }\n          const tableTypeName = inflection.tableType(table);\n          const InputType = newWithHooks(\n            GraphQLInputObjectType,\n            {\n              name: inflection.createInputType(table),\n              description: `All input for the create \\`${tableTypeName}\\` mutation.`,\n              fields: {\n                clientMutationId: {\n                  description:\n                    \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                  type: GraphQLString,\n                },\n                [inflection.tableFieldName(table)]: {\n                  description: `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                  type: new GraphQLNonNull(TableInput),\n                },\n              },\n            },\n            {\n              isPgCreateInputType: true,\n              pgInflection: table,\n            }\n          );\n          const PayloadType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.createPayloadType(table),\n              description: `The output of our create \\`${tableTypeName}\\` mutation.`,\n              fields: ({ recurseDataGeneratorsForField }) => {\n                const tableName = inflection.tableFieldName(table);\n                recurseDataGeneratorsForField(tableName);\n                return {\n                  clientMutationId: {\n                    description:\n                      \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                    type: GraphQLString,\n                  },\n                  [tableName]: {\n                    description: `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                    type: Table,\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isMutationPayload: true,\n              isPgCreatePayloadType: true,\n              pgIntrospection: table,\n            }\n          );\n          const fieldName = inflection.createField(table);\n          memo[fieldName] = fieldWithHooks(\n            fieldName,\n            context => {\n              const { getDataFromParsedResolveInfoFragment } = context;\n              return {\n                description: `Creates a single \\`${tableTypeName}\\`.`,\n                type: PayloadType,\n                args: {\n                  input: {\n                    type: new GraphQLNonNull(InputType),\n                  },\n                },\n                async resolve(data, { input }, { pgClient }, resolveInfo) {\n                  const parsedResolveInfoFragment = parseResolveInfo(\n                    resolveInfo\n                  );\n                  const resolveData = getDataFromParsedResolveInfoFragment(\n                    parsedResolveInfoFragment,\n                    PayloadType\n                  );\n                  const insertedRowAlias = sql.identifier(Symbol());\n                  const query = queryFromResolveData(\n                    insertedRowAlias,\n                    insertedRowAlias,\n                    resolveData,\n                    {}\n                  );\n                  const sqlColumns = [];\n                  const sqlValues = [];\n                  const inputData = input[inflection.tableFieldName(table)];\n                  pgIntrospectionResultsByKind.attribute\n                    .filter(attr => attr.classId === table.id)\n                    .filter(attr => pgColumnFilter(attr, build, context))\n                    .filter(attr => !omit(attr, \"create\"))\n                    .forEach(attr => {\n                      const fieldName = inflection.column(attr);\n                      const val = inputData[fieldName];\n                      if (\n                        Object.prototype.hasOwnProperty.call(\n                          inputData,\n                          fieldName\n                        )\n                      ) {\n                        sqlColumns.push(sql.identifier(attr.name));\n                        sqlValues.push(gql2pg(val, attr.type));\n                      }\n                    });\n\n                  const mutationQuery = sql.query`\n                    insert into ${sql.identifier(\n                      table.namespace.name,\n                      table.name\n                    )} ${\n                    sqlColumns.length\n                      ? sql.fragment`(\n                        ${sql.join(sqlColumns, \", \")}\n                      ) values(${sql.join(sqlValues, \", \")})`\n                      : sql.fragment`default values`\n                  } returning *`;\n\n                  let row;\n                  try {\n                    await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                    const rows = await viaTemporaryTable(\n                      pgClient,\n                      sql.identifier(table.namespace.name, table.name),\n                      mutationQuery,\n                      insertedRowAlias,\n                      query\n                    );\n                    row = rows[0];\n                    await pgClient.query(\"RELEASE SAVEPOINT graphql_mutation\");\n                  } catch (e) {\n                    await pgClient.query(\n                      \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                    );\n                    throw e;\n                  }\n                  return {\n                    clientMutationId: input.clientMutationId,\n                    data: row,\n                  };\n                },\n              };\n            },\n            {\n              pgFieldIntrospection: table,\n              isPgCreateMutationField: true,\n            }\n          );\n          return memo;\n        }, {}),\n      `Adding default 'create' mutation to root mutation`\n    );\n  });\n}: Plugin);\n"]}